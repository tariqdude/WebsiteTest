---
export interface Props {
  title: string;
  description: string;
  type:
    | 'counter'
    | 'chart'
    | 'form'
    | 'terminal'
    | 'editor'
    | 'animation'
    | 'dashboard';
  framework?: string;
}

const { title, description, type, framework } = Astro.props;

const icons = {
  counter: '🔢',
  chart: '📊',
  form: '📝',
  terminal: '🖥️',
  editor: '💻',
  animation: '🎬',
  dashboard: '📈',
};

const colors = {
  counter: 'from-blue-500 to-blue-600',
  chart: 'from-green-500 to-green-600',
  form: 'from-purple-500 to-purple-600',
  terminal: 'from-gray-500 to-gray-600',
  editor: 'from-indigo-500 to-indigo-600',
  animation: 'from-pink-500 to-pink-600',
  dashboard: 'from-orange-500 to-orange-600',
};
---

<div
  class='card rounded-xl border-2 border-dashed border-gray-300 bg-gradient-to-br from-gray-50 to-white p-8 text-center dark:border-gray-600 dark:from-gray-800 dark:to-gray-900'
>
  <div
    class={`inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-r ${colors[type]} text-white text-2xl mb-4`}
  >
    {icons[type]}
  </div>

  <h3 class='mb-2 text-xl font-bold text-gray-900 dark:text-white'>
    {title}
  </h3>

  <p class='mb-4 text-gray-600 dark:text-gray-300'>
    {description}
  </p>

  {
    framework && (
      <div class='inline-flex items-center rounded-full bg-gray-200 px-3 py-1 text-sm font-medium text-gray-700 dark:bg-gray-700 dark:text-gray-300'>
        {framework} Component
      </div>
    )
  }

  <div class='mt-6 text-sm text-gray-500 dark:text-gray-400'>
    🔄 Loading interactive component...
  </div>

  <!-- Simple loading animation -->
  <div class='mt-4 flex justify-center'>
    <div class='h-6 w-6 animate-spin rounded-full border-b-2 border-blue-500'>
    </div>
  </div>
</div>

<style>
  .card {
    transition: all 0.3s ease;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
</style>

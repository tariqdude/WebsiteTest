---
import { siteConfig } from '../../data/site';
import { clientLogos, businessStats } from '../../data/testimonials';

export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;

// Use configuration data
const heroData = siteConfig.hero;
const testimonialData = businessStats;
const companyInfo = siteConfig.business;
---

<section
  class={`relative min-h-screen flex items-center justify-center overflow-hidden ${className}`}
>
  <!-- Background Elements -->
  <div
    class="from-primary-600 via-primary-700 to-accent-600 absolute inset-0 bg-gradient-to-br"
  >
  </div>

  <!-- Animated Background Shapes -->
  <div class="absolute inset-0 overflow-hidden">
    <div
      class="absolute -right-40 -top-40 h-80 w-80 animate-float rounded-full bg-white/10 blur-3xl"
    >
    </div>
    <div
      class="bg-accent-500/20 absolute -left-20 top-20 h-60 w-60 animate-pulse-slow rounded-full blur-2xl"
    >
    </div>
    <div
      class="absolute bottom-20 right-20 h-40 w-40 animate-bounce-gentle rounded-full bg-white/5 blur-xl"
    >
    </div>
  </div>

  <!-- Simple Pattern Overlay -->
  <div class="absolute inset-0 opacity-10">
    <div
      class="absolute inset-0"
      style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0); background-size: 20px 20px;"
    >
    </div>
  </div>

  <div class="container relative z-10">
    <div class="grid items-center gap-12 lg:grid-cols-2 lg:gap-16">
      <!-- Content -->
      <div class="text-center lg:text-left">
        <!-- Subtitle Badge -->
        <div
          class="animate-fade-in-down mb-6 inline-flex items-center rounded-full border border-white/20 bg-white/10 px-4 py-2 text-sm font-medium text-white/90 backdrop-blur-sm"
          data-aos="fade-down"
          data-aos-delay="100"
        >
          <svg
            class="text-accent-300 mr-2 h-4 w-4"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z"
              clip-rule="evenodd"></path>
          </svg>
          {heroData.subtitle}
        </div>

        <!-- Main Title -->
        <h1
          class="h1 text-shadow-lg mb-6 text-white"
          data-aos="fade-up"
          data-aos-delay="200"
        >
          {heroData.title}
        </h1>

        <!-- Description -->
        <p
          class="body-lg mx-auto mb-8 max-w-2xl text-white/90 lg:mx-0"
          data-aos="fade-up"
          data-aos-delay="300"
        >
          {heroData.description}
        </p>

        <!-- Features List -->
        <div
          class="mb-8 flex flex-wrap justify-center gap-4 lg:justify-start"
          data-aos="fade-up"
          data-aos-delay="400"
        >
          {
            heroData.features.map((feature: string, index: number) => (
              <div
                class="flex items-center rounded-lg border border-white/20 bg-white/10 px-3 py-2 text-sm text-white/90 backdrop-blur-sm"
                data-aos="fade-up"
                data-aos-delay={500 + index * 100}
              >
                <svg
                  class="mr-2 h-4 w-4 text-green-400"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fill-rule="evenodd"
                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
                {feature}
              </div>
            ))
          }
        </div>

        <!-- CTA Buttons -->
        <div
          class="flex flex-col justify-center gap-4 sm:flex-row lg:justify-start"
          data-aos="fade-up"
          data-aos-delay="600"
        >
          <a
            href={heroData.primaryCTA.href}
            class="text-primary-600 group relative inline-flex transform items-center justify-center overflow-hidden rounded-xl bg-white px-8 py-4 font-semibold shadow-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-2xl"
          >
            <span class="relative z-10 flex items-center">
              {heroData.primaryCTA.text}
              <svg
                class="ml-2 h-5 w-5 transform transition-transform duration-200 group-hover:translate-x-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
              </svg>
            </span>
            <div
              class="from-primary-50 to-accent-50 absolute inset-0 origin-left scale-x-0 transform bg-gradient-to-r transition-transform duration-300 group-hover:scale-x-100"
            >
            </div>
          </a>

          <a
            href={heroData.secondaryCTA.href}
            class="group inline-flex items-center justify-center rounded-xl border-2 border-white/30 bg-transparent px-8 py-4 font-semibold text-white backdrop-blur-sm transition-all duration-300 hover:border-white hover:bg-white/10"
          >
            <svg
              class="mr-2 h-5 w-5 transform transition-transform duration-200 group-hover:scale-110"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                clip-rule="evenodd"></path>
            </svg>
            {heroData.secondaryCTA.text}
          </a>
        </div>

        <!-- Social Proof -->
        <div
          class="mt-12 border-t border-white/20 pt-8"
          data-aos="fade-up"
          data-aos-delay="700"
        >
          <p class="mb-4 text-sm text-white/70">Trusted by industry leaders</p>
          <div
            class="flex flex-wrap items-center justify-center gap-6 opacity-70 lg:justify-start"
          >
            {
              clientLogos
                .slice(0, 4)
                .map((client) => (
                  <div class="flex h-8 w-20 items-center justify-center rounded bg-white/20 text-xs font-medium text-white/60">
                    {client.name.split(' ')[0]}
                  </div>
                ))
            }
          </div>
        </div>
      </div>

      <!-- Hero Image/Video -->
      <div class="relative" data-aos="fade-left" data-aos-delay="400">
        <div class="group relative">
          <!-- Decorative Elements -->
          <div
            class="from-accent-500 to-primary-500 absolute -inset-4 rounded-2xl bg-gradient-to-r opacity-20 blur-2xl transition-opacity duration-500 group-hover:opacity-30"
          >
          </div>

          <div
            class="relative rounded-2xl border border-white/20 bg-white/10 p-1 shadow-2xl backdrop-blur-sm"
          >
            {
              heroData.video ? (
                <div class="relative overflow-hidden rounded-xl">
                  <video
                    autoplay
                    muted
                    loop
                    playsinline
                    class="h-auto w-full rounded-xl"
                    poster={heroData.image}
                  >
                    <source src={heroData.video} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                  <div class="absolute inset-0 rounded-xl bg-gradient-to-t from-black/20 to-transparent" />
                </div>
              ) : (
                <div class="relative overflow-hidden rounded-xl">
                  <img
                    src={heroData.image}
                    alt="Hero illustration"
                    class="h-auto w-full transform rounded-xl transition-transform duration-700 group-hover:scale-105"
                    loading="eager"
                  />
                  <div class="absolute inset-0 rounded-xl bg-gradient-to-t from-black/20 to-transparent" />
                </div>
              )
            }
          </div>

          <!-- Floating Elements -->
          <div
            class="bg-accent-400 absolute -right-6 -top-6 flex h-12 w-12 animate-bounce-gentle items-center justify-center rounded-full text-white shadow-xl"
          >
            <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z"
                clip-rule="evenodd"></path>
            </svg>
          </div>

          <div
            class="absolute -bottom-4 -left-4 flex h-16 w-16 animate-float items-center justify-center rounded-xl border border-white/30 bg-white/20 text-white shadow-xl backdrop-blur-sm"
          >
            <svg class="h-8 w-8" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>

        <!-- Stats Cards -->
        <div
          class="absolute -bottom-8 left-4 right-4 flex justify-between gap-4"
        >
          <div
            class="flex-1 rounded-lg border border-white/20 bg-white/10 p-4 text-center backdrop-blur-sm"
            data-aos="fade-up"
            data-aos-delay="800"
          >
            <div class="text-2xl font-bold text-white">
              {businessStats.satisfaction.total}
            </div>
            <div class="text-sm text-white/70">
              {businessStats.satisfaction.description.split(' ')[0]}
            </div>
          </div>
          <div
            class="flex-1 rounded-lg border border-white/20 bg-white/10 p-4 text-center backdrop-blur-sm"
            data-aos="fade-up"
            data-aos-delay="900"
          >
            <div class="text-2xl font-bold text-white">
              {businessStats.clients.total}
            </div>
            <div class="text-sm text-white/70">
              {businessStats.clients.description.split(' ')[0]}
            </div>
          </div>
          <div
            class="flex-1 rounded-lg border border-white/20 bg-white/10 p-4 text-center backdrop-blur-sm"
            data-aos="fade-up"
            data-aos-delay="1000"
          >
            <div class="text-2xl font-bold text-white">
              {businessStats.experience.total}
            </div>
            <div class="text-sm text-white/70">
              {businessStats.experience.description.split(' ')[0]} Years
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scroll Indicator -->
  <div
    class="absolute bottom-8 left-1/2 -translate-x-1/2 transform animate-bounce text-white/70"
    data-aos="fade-up"
    data-aos-delay="1200"
  >
    <svg
      class="mx-auto mb-2 h-6 w-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
    <span class="text-xs">Scroll to explore</span>
  </div>
</section>

<script>
  // Parallax effect for hero section
  const heroSection = document.querySelector('.hero-section');
  const backgroundShapes = document.querySelectorAll('.absolute');

  if (heroSection) {
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const parallax = scrolled * 0.5;

      backgroundShapes.forEach((shape, index) => {
        const speed = (index + 1) * 0.1;
        const yPos = -(scrolled * speed);
        (shape as HTMLElement).style.transform = `translateY(${yPos}px)`;
      });
    });
  }

  // Intersection Observer for counting animations
  const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const target = entry.target;
        const finalNumber = parseInt(target.textContent);
        let currentNumber = 0;
        const increment = finalNumber / 50;

        const countUp = setInterval(() => {
          currentNumber += increment;
          if (currentNumber >= finalNumber) {
            target.textContent =
              finalNumber.toString() +
              (target.textContent.includes('%') ? '%' : '+');
            clearInterval(countUp);
          } else {
            target.textContent =
              Math.floor(currentNumber).toString() +
              (target.textContent.includes('%') ? '%' : '+');
          }
        }, 50);

        statsObserver.unobserve(target);
      }
    });
  });

  // Observe stat numbers
  document.querySelectorAll('.text-2xl.font-bold').forEach((stat) => {
    statsObserver.observe(stat);
  });
</script>

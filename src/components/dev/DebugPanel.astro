---
/**
 * Development Debug Panel
 * Shows error logs, performance metrics, and debugging tools
 * Only visible in development mode
 */

export interface Props {
  show?: boolean;
}

const { show = import.meta.env.DEV } = Astro.props;

// Only render in development
if (!show) {
  return null;
}
---

<div id="debug-panel" class="fixed bottom-4 right-4 z-[9999] max-w-sm">
  <!-- Toggle Button -->
  <button 
    id="debug-toggle" 
    class="bg-red-600 hover:bg-red-700 text-white p-3 rounded-full shadow-lg transition-all duration-200"
    title="Toggle Debug Panel"
  >
    <i class="fas fa-bug text-lg"></i>
  </button>

  <!-- Debug Panel Content -->
  <div 
    id="debug-content" 
    class="hidden absolute bottom-16 right-0 bg-gray-900 text-white rounded-lg shadow-2xl border border-gray-700 w-96 max-h-96 overflow-hidden"
  >
    <!-- Header -->
    <div class="bg-gray-800 px-4 py-3 border-b border-gray-700 flex items-center justify-between">
      <h3 class="font-semibold flex items-center">
        <i class="fas fa-bug mr-2 text-red-400"></i>
        Debug Panel
      </h3>
      <button id="debug-clear" class="text-xs bg-red-600 hover:bg-red-700 px-2 py-1 rounded">
        Clear
      </button>
    </div>

    <!-- Tabs -->
    <div class="flex border-b border-gray-700">
      <button class="debug-tab active px-3 py-2 text-xs hover:bg-gray-800 border-b-2 border-red-500" data-tab="errors">
        Errors (<span id="error-count">0</span>)
      </button>
      <button class="debug-tab px-3 py-2 text-xs hover:bg-gray-800" data-tab="performance">
        Performance
      </button>
      <button class="debug-tab px-3 py-2 text-xs hover:bg-gray-800" data-tab="network">
        Network
      </button>
    </div>

    <!-- Tab Content -->
    <div class="p-4 overflow-y-auto max-h-64">
      <!-- Errors Tab -->
      <div id="errors-tab" class="debug-tab-content">
        <div id="error-list" class="space-y-2 text-xs">
          <p class="text-gray-400">No errors logged yet.</p>
        </div>
      </div>

      <!-- Performance Tab -->
      <div id="performance-tab" class="debug-tab-content hidden">
        <div class="space-y-3 text-xs">
          <div>
            <div class="text-gray-400">Page Load Time</div>
            <div id="load-time" class="text-green-400 font-mono">--</div>
          </div>
          <div>
            <div class="text-gray-400">DOM Content Loaded</div>
            <div id="dom-ready" class="text-blue-400 font-mono">--</div>
          </div>
          <div>
            <div class="text-gray-400">Memory Usage</div>
            <div id="memory-usage" class="text-yellow-400 font-mono">--</div>
          </div>
          <div>
            <div class="text-gray-400">Components Loaded</div>
            <div id="component-count" class="text-purple-400 font-mono">--</div>
          </div>
        </div>
      </div>

      <!-- Network Tab -->
      <div id="network-tab" class="debug-tab-content hidden">
        <div id="network-list" class="space-y-2 text-xs">
          <p class="text-gray-400">Network requests will appear here.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .debug-tab.active {
    background-color: rgb(55 65 81);
    border-bottom-color: rgb(239 68 68);
  }
  
  .error-item {
    background: rgb(127 29 29 / 0.3);
    border-left: 3px solid rgb(239 68 68);
    padding: 8px;
    border-radius: 4px;
    margin-bottom: 8px;
  }
  
  .network-item {
    background: rgb(55 65 81 / 0.3);
    border-left: 3px solid rgb(59 130 246);
    padding: 6px;
    border-radius: 4px;
    margin-bottom: 6px;
  }
</style>

<script is:inline>
  // Debug Panel functionality
  document.addEventListener('DOMContentLoaded', function() {
    const debugToggle = document.getElementById('debug-toggle');
    const debugContent = document.getElementById('debug-content');
    const debugTabs = document.querySelectorAll('.debug-tab');
    const debugTabContents = document.querySelectorAll('.debug-tab-content');
    const debugClear = document.getElementById('debug-clear');
    const errorList = document.getElementById('error-list');
    const errorCount = document.getElementById('error-count');

    if (!debugToggle || !debugContent) return;

    // Toggle panel visibility
    debugToggle.addEventListener('click', function() {
      debugContent.classList.toggle('hidden');
      updatePerformanceMetrics();
    });

    // Tab switching
    debugTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabName = this.dataset.tab;
        
        // Update active tab
        debugTabs.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // Show corresponding content
        debugTabContents.forEach(content => {
          content.classList.add('hidden');
        });
        document.getElementById(tabName + '-tab').classList.remove('hidden');
      });
    });

    // Clear errors
    if (debugClear) {
      debugClear.addEventListener('click', function() {
        if (window.errorManager) {
          window.errorManager.clearErrors();
          updateErrorDisplay();
        }
      });
    }

    // Initialize error monitoring
    function initializeErrorMonitoring() {
      // Monitor global errors
      window.addEventListener('error', function(event) {
        logDebugError({
          message: event.error?.message || event.message,
          component: 'Global',
          timestamp: new Date(),
          stack: event.error?.stack,
          filename: event.filename,
          lineno: event.lineno
        });
      });

      // Monitor unhandled promise rejections
      window.addEventListener('unhandledrejection', function(event) {
        logDebugError({
          message: event.reason?.message || 'Unhandled Promise Rejection',
          component: 'Promise',
          timestamp: new Date(),
          stack: event.reason?.stack
        });
      });

      // Hook into errorManager if available
      if (window.errorManager) {
        // Override logError to update debug panel
        const originalLogError = window.errorManager.logError;
        window.errorManager.logError = function(error, component, options) {
          originalLogError.call(this, error, component, options);
          setTimeout(updateErrorDisplay, 100); // Update after error is stored
        };
      }
    }

    // Log error to debug panel
    function logDebugError(errorInfo) {
      updateErrorDisplay();
      
      // Flash debug button
      debugToggle.classList.add('animate-pulse');
      setTimeout(() => debugToggle.classList.remove('animate-pulse'), 1000);
    }

    // Update error display
    function updateErrorDisplay() {
      if (!errorList || !errorCount) return;

      const errors = window.errorManager ? window.errorManager.getErrors() : [];
      errorCount.textContent = errors.length;

      if (errors.length === 0) {
        errorList.innerHTML = '<p class="text-gray-400">No errors logged yet.</p>';
        return;
      }

      errorList.innerHTML = errors.slice(0, 10).map(error => `
        <div class="error-item">
          <div class="font-semibold text-red-400">${error.component || 'Unknown'}</div>
          <div class="text-gray-300">${error.message}</div>
          <div class="text-gray-500 text-xs mt-1">${error.timestamp.toLocaleTimeString()}</div>
        </div>
      `).join('');
    }

    // Update performance metrics
    function updatePerformanceMetrics() {
      const loadTimeEl = document.getElementById('load-time');
      const domReadyEl = document.getElementById('dom-ready');
      const memoryEl = document.getElementById('memory-usage');
      const componentCountEl = document.getElementById('component-count');

      if (loadTimeEl && performance.timing) {
        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
        loadTimeEl.textContent = loadTime > 0 ? `${loadTime}ms` : 'Loading...';
      }

      if (domReadyEl && performance.timing) {
        const domReady = performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;
        domReadyEl.textContent = domReady > 0 ? `${domReady}ms` : 'Loading...';
      }

      if (memoryEl && performance.memory) {
        const used = Math.round(performance.memory.usedJSHeapSize / 1048576);
        memoryEl.textContent = `${used}MB`;
      }

      if (componentCountEl) {
        const components = document.querySelectorAll('[data-astro-component]').length;
        componentCountEl.textContent = components;
      }
    }

    // Initialize network monitoring
    function initializeNetworkMonitoring() {
      const networkList = document.getElementById('network-list');
      if (!networkList) return;

      // Monitor fetch requests
      const originalFetch = window.fetch;
      window.fetch = function(...args) {
        const startTime = Date.now();
        const url = args[0];
        
        return originalFetch.apply(this, args).then(response => {
          const endTime = Date.now();
          addNetworkEntry(url, response.status, endTime - startTime, 'fetch');
          return response;
        }).catch(error => {
          const endTime = Date.now();
          addNetworkEntry(url, 0, endTime - startTime, 'fetch', error.message);
          throw error;
        });
      };

      function addNetworkEntry(url, status, duration, type, error) {
        const statusColor = status >= 400 ? 'text-red-400' : status >= 300 ? 'text-yellow-400' : 'text-green-400';
        const entry = document.createElement('div');
        entry.className = 'network-item';
        entry.innerHTML = `
          <div class="flex justify-between">
            <div class="font-mono text-xs ${statusColor}">${type.toUpperCase()}</div>
            <div class="text-xs text-gray-400">${duration}ms</div>
          </div>
          <div class="text-xs text-gray-300 truncate">${url}</div>
          ${error ? `<div class="text-xs text-red-400">Error: ${error}</div>` : ''}
          <div class="text-xs ${statusColor}">Status: ${status || 'Error'}</div>
        `;
        
        networkList.insertBefore(entry, networkList.firstChild);
        
        // Keep only last 20 entries
        while (networkList.children.length > 20) {
          networkList.removeChild(networkList.lastChild);
        }
        
        if (networkList.children.length === 1 && networkList.children[0].textContent.includes('Network requests')) {
          networkList.removeChild(networkList.children[0]);
        }
      }
    }

    // Initialize all monitoring
    initializeErrorMonitoring();
    initializeNetworkMonitoring();
    updateErrorDisplay();

    // Periodically update metrics
    setInterval(updatePerformanceMetrics, 5000);

    // Close panel when clicking outside
    document.addEventListener('click', function(event) {
      if (!debugContent.contains(event.target) && event.target !== debugToggle) {
        debugContent.classList.add('hidden');
      }
    });
  });
</script>

---
// src/components/BackgroundManager.astro
export interface Props {
  defaultType?: 'youtube' | 'gallery' | 'video' | 'gradient';
  youtubeId?: string;
  videoSrc?: string;
  images?: string[];
  enableControls?: boolean;
}

const { 
  defaultType = 'youtube',
  youtubeId = 'LXb3EKWsInQ', // 4K Nature Video - Costa Rica
  videoSrc = '',
  images = [],
  enableControls = true 
} = Astro.props;
---

<div id="background-manager" class="fixed inset-0 w-full h-full overflow-hidden -z-10">
  <!-- YouTube Background -->
  <div id="youtube-bg" class="absolute inset-0 w-full h-full hidden">
    <div id="youtube-player" class="w-full h-full"></div>
    <div class="absolute inset-0 bg-black/30 pointer-events-none"></div>
  </div>

  <!-- Video Background (MP4, WebM, etc.) -->
  <div id="video-bg" class="absolute inset-0 w-full h-full hidden">
    <video
      id="bg-video"
      class="w-full h-full object-cover"
      autoplay
      muted
      loop
      playsinline
      preload="metadata"
    >
      <source id="video-source" src="" type="video/mp4">
      Your browser does not support the video tag.
    </video>
    <div class="absolute inset-0 bg-black/20 pointer-events-none"></div>
  </div>

  <!-- Gallery Background -->
  <div id="gallery-bg" class="absolute inset-0 w-full h-full hidden">
    <div class="gallery-container relative w-full h-full">
      <div class="gallery-slides absolute inset-0">
        <!-- Images will be dynamically inserted here -->
      </div>
    </div>
    <div class="absolute inset-0 bg-black/20 pointer-events-none"></div>
  </div>

  <!-- Gradient Background (Fallback) -->
  <div id="gradient-bg" class="absolute inset-0 w-full h-full bg-gradient-radial from-primary-900 via-primary-800 to-primary-900">
    <div class="absolute inset-0 bg-gradient-conic opacity-20"></div>
    <div class="absolute inset-0 bg-grid opacity-5"></div>
    <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-accent-500/10 rounded-full blur-3xl animate-float"></div>
    <div class="absolute bottom-1/4 right-1/4 w-64 h-64 bg-secondary-500/10 rounded-full blur-2xl animate-float-delayed"></div>
  </div>
</div>

<!-- Background Controls -->
{enableControls && (
  <div id="bg-controls" class="fixed top-20 right-4 z-50 bg-black/90 backdrop-blur-lg rounded-2xl shadow-2xl transform translate-x-full transition-all duration-500 ease-in-out">
    <button id="toggle-controls" class="absolute -left-14 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-purple-600 to-blue-600 text-white p-3 rounded-l-xl hover:from-purple-700 hover:to-blue-700 transition-all duration-300 shadow-lg">
      <i class="fas fa-sliders-h text-lg"></i>
    </button>
    
    <div class="p-6 w-80">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <h3 class="text-white text-lg font-bold">Background Settings</h3>
        <i class="fas fa-palette text-purple-400"></i>
      </div>
      
      <!-- Background Type Selection -->
      <div class="space-y-3 mb-6">
        <h4 class="text-gray-300 text-sm font-semibold uppercase tracking-wide">Background Type</h4>
        <div class="grid grid-cols-2 gap-2">
          <label class="bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg p-3 cursor-pointer transition-all duration-200 group">
            <input type="radio" name="bg-type" value="youtube" class="sr-only" checked>
            <div class="flex flex-col items-center space-y-2">
              <i class="fab fa-youtube text-red-500 text-xl group-hover:scale-110 transition-transform"></i>
              <span class="text-white text-xs font-medium">YouTube</span>
            </div>
          </label>
          <label class="bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg p-3 cursor-pointer transition-all duration-200 group">
            <input type="radio" name="bg-type" value="video" class="sr-only">
            <div class="flex flex-col items-center space-y-2">
              <i class="fas fa-video text-blue-500 text-xl group-hover:scale-110 transition-transform"></i>
              <span class="text-white text-xs font-medium">Video</span>
            </div>
          </label>
          <label class="bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg p-3 cursor-pointer transition-all duration-200 group">
            <input type="radio" name="bg-type" value="gallery" class="sr-only">
            <div class="flex flex-col items-center space-y-2">
              <i class="fas fa-images text-green-500 text-xl group-hover:scale-110 transition-transform"></i>
              <span class="text-white text-xs font-medium">Gallery</span>
            </div>
          </label>
          <label class="bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg p-3 cursor-pointer transition-all duration-200 group">
            <input type="radio" name="bg-type" value="gradient" class="sr-only">
            <div class="flex flex-col items-center space-y-2">
              <i class="fas fa-palette text-purple-500 text-xl group-hover:scale-110 transition-transform"></i>
              <span class="text-white text-xs font-medium">Gradient</span>
            </div>
          </label>
        </div>
      </div>

    <!-- YouTube Controls -->
    <div id="youtube-controls" class="space-y-4">
      <h4 class="text-gray-300 text-sm font-semibold uppercase tracking-wide">YouTube Settings</h4>
      
      <!-- Preset Videos -->
      <div class="space-y-2">
        <label class="text-gray-400 text-xs font-medium">Quick Select (4K Videos)</label>
        <div class="grid grid-cols-1 gap-2">
          <button class="youtube-preset bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 transform hover:scale-105" data-id="LXb3EKWsInQ">
            üåø Nature - Costa Rica 4K
          </button>
          <button class="youtube-preset bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 transform hover:scale-105" data-id="1Ne1hqaNkv4">
            üåä Ocean Waves 4K
          </button>
          <button class="youtube-preset bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 transform hover:scale-105" data-id="2MsN8gpT6jY">
            üèîÔ∏è Mountain Time-lapse 4K
          </button>
          <button class="youtube-preset bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 transform hover:scale-105" data-id="tnfOy94wQZg">
            üåå Space & Stars 4K
          </button>
        </div>
      </div>
      
      <!-- Custom YouTube ID -->
      <div class="space-y-2">
        <label class="text-gray-400 text-xs font-medium">Custom YouTube Video ID</label>
        <div class="flex space-x-2">
          <input 
            type="text" 
            id="youtube-id-input" 
            placeholder="e.g., LXb3EKWsInQ" 
            class="flex-1 px-3 py-2 bg-white/10 text-white placeholder-white/50 border border-white/20 rounded-lg text-sm focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-all"
            value={youtubeId}
          >
          <button id="load-youtube" class="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 flex items-center space-x-1">
            <i class="fab fa-youtube"></i>
            <span>Load</span>
          </button>
        </div>
      </div>
    </div>
        <!-- Video Upload Controls -->
    <div id="video-controls" class="space-y-4 hidden">
      <h4 class="text-gray-300 text-sm font-semibold uppercase tracking-wide">Video Settings</h4>
      
      <div class="space-y-3">
        <div class="space-y-2">
          <label class="text-gray-400 text-xs font-medium">Upload Video File</label>
          <input 
            type="file" 
            id="video-upload" 
            accept="video/mp4,video/webm,video/ogg,.gif" 
            class="w-full text-white text-sm file:mr-2 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-gradient-to-r file:from-blue-600 file:to-blue-700 file:text-white file:font-semibold file:cursor-pointer hover:file:from-blue-700 hover:file:to-blue-800 file:transition-all"
          >
        </div>
        
        <div class="text-center text-gray-400 text-xs">OR</div>
        
        <div class="space-y-2">
          <label class="text-gray-400 text-xs font-medium">Video URL</label>
          <div class="flex space-x-2">
            <input 
              type="url" 
              id="video-url-input" 
              placeholder="https://example.com/video.mp4" 
              class="flex-1 px-3 py-2 bg-white/10 text-white placeholder-white/50 border border-white/20 rounded-lg text-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-all"
            >
            <button id="load-video" class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 flex items-center space-x-1">
              <i class="fas fa-play"></i>
              <span>Load</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Gallery Controls -->
    <div id="gallery-controls" class="space-y-4 hidden">
      <h4 class="text-gray-300 text-sm font-semibold uppercase tracking-wide">Gallery Settings</h4>
      
      <div class="space-y-3">
        <div class="space-y-2">
          <label class="text-gray-400 text-xs font-medium">Upload Images</label>
          <input 
            type="file" 
            id="gallery-upload" 
            accept="image/*" 
            multiple 
            class="w-full text-white text-sm file:mr-2 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-gradient-to-r file:from-green-600 file:to-green-700 file:text-white file:font-semibold file:cursor-pointer hover:file:from-green-700 hover:file:to-green-800 file:transition-all"
          >
          <div class="text-xs text-gray-400">Select multiple images for slideshow</div>
        </div>
        
        <div class="space-y-2">
          <label class="flex items-center text-white text-sm group cursor-pointer">
            <input type="checkbox" id="gallery-autoplay" class="sr-only" checked>
            <div class="w-5 h-5 border-2 border-white/30 rounded bg-white/10 mr-3 flex items-center justify-center group-hover:border-green-500 transition-colors">
              <i class="fas fa-check text-green-500 text-xs opacity-100"></i>
            </div>
            <span class="text-sm">Auto-play slideshow</span>
          </label>
        </div>
      </div>
    </div>

    <!-- Global Controls -->
    <div class="border-t border-white/20 pt-4 space-y-4">
      <h4 class="text-gray-300 text-sm font-semibold uppercase tracking-wide">Global Settings</h4>
      
      <div class="space-y-3">
        <!-- Overlay Opacity -->
        <div class="space-y-2">
          <div class="flex justify-between items-center">
            <label class="text-gray-400 text-xs font-medium">Overlay Opacity</label>
            <span id="opacity-value" class="text-white text-xs">20%</span>
          </div>
          <input 
            type="range" 
            id="overlay-opacity" 
            min="0" 
            max="70" 
            value="20" 
            class="w-full h-2 bg-white/20 rounded-lg appearance-none cursor-pointer slider"
          >
        </div>
        
        <!-- Mute Control -->
        <div class="space-y-2">
          <label class="flex items-center text-white text-sm group cursor-pointer">
            <input type="checkbox" id="mute-video" class="sr-only" checked>
            <div class="w-5 h-5 border-2 border-white/30 rounded bg-white/10 mr-3 flex items-center justify-center group-hover:border-purple-500 transition-colors">
              <i class="fas fa-check text-purple-500 text-xs opacity-100"></i>
            </div>
            <span class="text-sm">Mute videos</span>
          </label>
        </div>
        
        <!-- Reset Button -->
        <button id="reset-background" class="w-full bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-4 py-2 rounded-lg text-sm transition-all duration-200 flex items-center justify-center space-x-2">
          <i class="fas fa-undo"></i>
          <span>Reset to Default</span>
        </button>
      </div>
    </div>
  </div>
)}

<script is:inline define:vars={{ defaultType, youtubeId, videoSrc, images, enableControls }}>
  class BackgroundManager {
    constructor() {
      this.currentType = defaultType;
      this.youtubePlayer = null;
      this.galleryInterval = null;
      this.currentSlide = 0;
      this.galleryImages = images || [];
      
      this.init();
    }

    init() {
      this.bindControls();
      this.loadYouTubeAPI();
      this.setBackground(this.currentType);
      
      // Load saved preferences
      this.loadPreferences();
      
      // Responsive handling
      window.addEventListener('resize', () => this.handleResize());
    }

    bindControls() {
      if (!enableControls) return;

      const toggleBtn = document.getElementById('toggle-controls');
      const controls = document.getElementById('bg-controls');
      
      toggleBtn?.addEventListener('click', () => {
        controls.classList.toggle('translate-x-full');
      });

      // Background type selection with visual feedback
      document.querySelectorAll('input[name="bg-type"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
          this.setBackground(e.target.value);
          this.showControlPanel(e.target.value);
          this.updateRadioButtons(e.target.value);
        });
      });

      // YouTube preset buttons
      document.querySelectorAll('.youtube-preset').forEach(button => {
        button.addEventListener('click', (e) => {
          const videoId = e.target.dataset.id;
          if (videoId) {
            document.getElementById('youtube-id-input').value = videoId;
            this.loadYouTubeVideo(videoId);
            // Select YouTube radio if not already selected
            document.querySelector('input[name="bg-type"][value="youtube"]').checked = true;
            this.updateRadioButtons('youtube');
            this.setBackground('youtube');
            this.showControlPanel('youtube');
          }
        });
      });

      // YouTube controls
      document.getElementById('load-youtube')?.addEventListener('click', () => {
        const videoId = document.getElementById('youtube-id-input').value;
        if (videoId) {
          this.loadYouTubeVideo(videoId);
        }
      });

      // Video controls
      document.getElementById('video-upload')?.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          this.loadVideoFile(file);
        }
      });

      document.getElementById('load-video')?.addEventListener('click', () => {
        const url = document.getElementById('video-url-input').value;
        if (url) {
          this.loadVideoURL(url);
        }
      });

      // Gallery controls
      document.getElementById('gallery-upload')?.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        this.loadGalleryImages(files);
      });

      // Overlay opacity with live preview
      const opacitySlider = document.getElementById('overlay-opacity');
      const opacityValue = document.getElementById('opacity-value');
      opacitySlider?.addEventListener('input', (e) => {
        const value = e.target.value;
        this.setOverlayOpacity(value);
        if (opacityValue) {
          opacityValue.textContent = `${value}%`;
        }
      });

      // Mute control
      document.getElementById('mute-video')?.addEventListener('change', (e) => {
        this.setVideoMute(e.target.checked);
      });

      // Reset button
      document.getElementById('reset-background')?.addEventListener('click', () => {
        this.resetToDefault();
      });
    }

    updateRadioButtons(selectedType) {
      // Update visual state of radio buttons
      document.querySelectorAll('input[name="bg-type"]').forEach(radio => {
        const label = radio.closest('label');
        if (radio.value === selectedType) {
          label.classList.add('bg-white/20', 'border-white/40');
          label.classList.remove('bg-white/5');
        } else {
          label.classList.remove('bg-white/20', 'border-white/40');
          label.classList.add('bg-white/5');
        }
      });
    }

    resetToDefault() {
      // Reset to default YouTube video
      this.setBackground('youtube');
      document.querySelector('input[name="bg-type"][value="youtube"]').checked = true;
      this.updateRadioButtons('youtube');
      this.showControlPanel('youtube');
      document.getElementById('youtube-id-input').value = youtubeId;
      this.loadYouTubeVideo(youtubeId);
      
      // Reset overlay opacity
      document.getElementById('overlay-opacity').value = 20;
      document.getElementById('opacity-value').textContent = '20%';
      this.setOverlayOpacity(20);
      
      // Reset mute
      document.getElementById('mute-video').checked = true;
      this.setVideoMute(true);
    }

    loadYouTubeAPI() {
      if (window.YT) return;
      
      const tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/iframe_api';
      const firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      
      window.onYouTubeIframeAPIReady = () => {
        this.createYouTubePlayer();
      };
    }

    createYouTubePlayer() {
      this.youtubePlayer = new YT.Player('youtube-player', {
        videoId: youtubeId,
        playerVars: {
          autoplay: 1,
          mute: 1,
          loop: 1,
          playlist: youtubeId,
          controls: 0,
          showinfo: 0,
          rel: 0,
          iv_load_policy: 3,
          modestbranding: 1,
          playsinline: 1
        },
        events: {
          onReady: () => {
            this.handleResize();
          }
        }
      });
    }

    setBackground(type) {
      // Hide all backgrounds
      document.querySelectorAll('#background-manager > div').forEach(bg => {
        bg.classList.add('hidden');
      });

      // Show selected background
      const targetBg = document.getElementById(`${type}-bg`);
      if (targetBg) {
        targetBg.classList.remove('hidden');
      }

      this.currentType = type;
      this.savePreferences();
      
      // Handle specific background logic
      switch (type) {
        case 'youtube':
          this.handleYouTubeBackground();
          break;
        case 'gallery':
          this.startGallerySlideshow();
          break;
        case 'video':
          this.handleVideoBackground();
          break;
      }
    }

    showControlPanel(type) {
      // Hide all control panels
      document.querySelectorAll('[id$="-controls"]').forEach(panel => {
        panel.classList.add('hidden');
      });

      // Show relevant control panel
      const panel = document.getElementById(`${type}-controls`);
      if (panel) {
        panel.classList.remove('hidden');
      }
    }

    loadYouTubeVideo(videoId) {
      if (this.youtubePlayer) {
        this.youtubePlayer.loadVideoById(videoId);
        this.handleResize();
      }
    }

    loadVideoFile(file) {
      const url = URL.createObjectURL(file);
      this.loadVideoURL(url);
    }

    loadVideoURL(url) {
      const video = document.getElementById('bg-video');
      const source = document.getElementById('video-source');
      
      if (video && source) {
        source.src = url;
        
        // Detect video type
        const extension = url.split('.').pop().toLowerCase();
        const mimeTypes = {
          'mp4': 'video/mp4',
          'webm': 'video/webm',
          'ogg': 'video/ogg',
          'mov': 'video/quicktime',
          'avi': 'video/x-msvideo'
        };
        
        source.type = mimeTypes[extension] || 'video/mp4';
        video.load();
      }
    }

    loadGalleryImages(files) {
      const container = document.querySelector('.gallery-slides');
      if (!container) return;

      container.innerHTML = '';
      this.galleryImages = [];

      files.forEach((file, index) => {
        const url = URL.createObjectURL(file);
        this.galleryImages.push(url);
        
        const slide = document.createElement('div');
        slide.className = `gallery-slide absolute inset-0 w-full h-full transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`;
        slide.innerHTML = `
          <img 
            src="${url}" 
            alt="Background ${index + 1}"
            class="w-full h-full object-cover"
            loading="lazy"
          >
        `;
        container.appendChild(slide);
      });

      this.currentSlide = 0;
      this.startGallerySlideshow();
    }

    startGallerySlideshow() {
      const autoplay = document.getElementById('gallery-autoplay')?.checked !== false;
      
      if (this.galleryInterval) {
        clearInterval(this.galleryInterval);
      }

      if (autoplay && this.galleryImages.length > 1) {
        this.galleryInterval = setInterval(() => {
          this.nextSlide();
        }, 5000);
      }
    }

    nextSlide() {
      const slides = document.querySelectorAll('.gallery-slide');
      if (slides.length <= 1) return;

      slides[this.currentSlide].classList.remove('opacity-100');
      slides[this.currentSlide].classList.add('opacity-0');
      
      this.currentSlide = (this.currentSlide + 1) % slides.length;
      
      slides[this.currentSlide].classList.remove('opacity-0');
      slides[this.currentSlide].classList.add('opacity-100');
    }

    handleYouTubeBackground() {
      setTimeout(() => this.handleResize(), 100);
    }

    handleVideoBackground() {
      const video = document.getElementById('bg-video');
      if (video) {
        video.play().catch(console.error);
      }
    }

    handleResize() {
      if (this.youtubePlayer && this.currentType === 'youtube') {
        const container = document.getElementById('youtube-bg');
        if (container) {
          const containerWidth = container.offsetWidth;
          const containerHeight = container.offsetHeight;
          const aspectRatio = 16 / 9;
          
          let playerWidth, playerHeight;
          
          if (containerWidth / containerHeight > aspectRatio) {
            playerWidth = containerWidth;
            playerHeight = containerWidth / aspectRatio;
          } else {
            playerWidth = containerHeight * aspectRatio;
            playerHeight = containerHeight;
          }
          
          const playerElement = document.getElementById('youtube-player');
          if (playerElement) {
            playerElement.style.width = `${playerWidth}px`;
            playerElement.style.height = `${playerHeight}px`;
            playerElement.style.position = 'absolute';
            playerElement.style.top = '50%';
            playerElement.style.left = '50%';
            playerElement.style.transform = 'translate(-50%, -50%)';
          }
        }
      }
    }

    setOverlayOpacity(value) {
      const overlays = document.querySelectorAll('#background-manager .pointer-events-none');
      overlays.forEach(overlay => {
        overlay.style.backgroundColor = `rgba(0, 0, 0, ${value / 100})`;
      });
    }

    setVideoMute(muted) {
      const video = document.getElementById('bg-video');
      if (video) {
        video.muted = muted;
      }
      
      if (this.youtubePlayer) {
        if (muted) {
          this.youtubePlayer.mute();
        } else {
          this.youtubePlayer.unMute();
        }
      }
    }

    savePreferences() {
      const preferences = {
        backgroundType: this.currentType,
        overlayOpacity: document.getElementById('overlay-opacity')?.value || 20,
        muteVideo: document.getElementById('mute-video')?.checked !== false
      };
      
      localStorage.setItem('bgManagerPrefs', JSON.stringify(preferences));
    }

    
  loadPreferences() {
      try {
        const saved = localStorage.getItem('bgManagerPrefs');
        if (saved) {
          const prefs = JSON.parse(saved);
          
          // Set background type
          const radio = document.querySelector(`input[name="bg-type"][value="${prefs.backgroundType}"]`);
          if (radio) {
            radio.checked = true;
            this.setBackground(prefs.backgroundType);
            this.showControlPanel(prefs.backgroundType);
          }
          
          // Set overlay opacity
          const opacitySlider = document.getElementById('overlay-opacity');
          if (opacitySlider) {
            opacitySlider.value = prefs.overlayOpacity;
            this.setOverlayOpacity(prefs.overlayOpacity);
          }
          
          // Set mute preference
          const muteCheckbox = document.getElementById('mute-video');
          if (muteCheckbox) {
            muteCheckbox.checked = prefs.muteVideo;
            this.setVideoMute(prefs.muteVideo);
          }
        }
      } catch (error) {
        console.error('Error loading preferences:', error);
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new BackgroundManager();
    });
  } else {
    new BackgroundManager();
  }
</script>

<style>
  .gallery-container {
    position: relative;
    overflow: hidden;
  }
  
  .gallery-slides img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }
  
  .gallery-slides img.active {
    opacity: 1;
  }
  
  .gallery-slide img {
    transition: transform 20s ease-in-out;
  }
  
  .gallery-slide.opacity-100 img {
    transform: scale(1.05);
  }
  
  /* Custom Range Slider Styling */
  .slider {
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
    outline: none;
    transition: all 0.3s ease;
  }
  
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: linear-gradient(45deg, #8b5cf6, #a855f7);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(139, 92, 246, 0.3);
    transition: all 0.3s ease;
  }
  
  .slider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
    box-shadow: 0 6px 12px rgba(139, 92, 246, 0.5);
  }
  
  .slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: linear-gradient(45deg, #8b5cf6, #a855f7);
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 4px 8px rgba(139, 92, 246, 0.3);
    transition: all 0.3s ease;
  }
  
  .slider::-moz-range-thumb:hover {
    transform: scale(1.2);
    box-shadow: 0 6px 12px rgba(139, 92, 246, 0.5);
  }
  
  /* Custom Checkbox Styling */
  input[type="checkbox"]:checked + div i {
    opacity: 1;
  }
  
  input[type="checkbox"]:not(:checked) + div i {
    opacity: 0;
  }
  
  /* Radio button styling */
  input[name="bg-type"]:checked + div {
    transform: scale(1.05);
  }
  
  input[name="bg-type"]:checked + div i {
    color: #fff;
  }
  
  /* Scrollbar for controls panel */
  #bg-controls {
    max-height: 90vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
  }
  
  #bg-controls::-webkit-scrollbar {
    width: 6px;
  }
  
  #bg-controls::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #bg-controls::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }
  
  #bg-controls::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  /* Preset button hover effects */
  .youtube-preset {
    position: relative;
    overflow: hidden;
  }
  
  .youtube-preset::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }
  
  .youtube-preset:hover::before {
    left: 100%;
  }
  
  /* Legacy range styles for fallback */
  #bg-controls input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    outline: none;
  }
  
  #bg-controls input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
  }
  
  #bg-controls input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    cursor: pointer;
    border: none;
  }
</style>

---
/**
 * Enhanced Contact Form with Bulletproof Error Handling
 * Features comprehensive validation, error boundaries, and user feedback
 */

export interface Props {
  class?: string;
  action?: string;
  method?: 'POST' | 'GET';
  showDebugInfo?: boolean;
}

const { 
  class: additionalClasses = '',
  action = '#',
  method = 'POST',
  showDebugInfo = import.meta.env.DEV
} = Astro.props;

const formId = `contact-form-${Math.random().toString(36).substring(2, 9)}`;
---

<div class={`enhanced-contact-form ${additionalClasses}`}>
  <!-- Form Status Messages -->
  <div id="form-messages" class="mb-6 space-y-4">
    <!-- Success Message -->
    <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
      <div class="flex items-center">
        <i class="fas fa-check-circle text-green-500 mr-2"></i>
        <div>
          <strong>Message sent successfully!</strong>
          <p class="text-sm mt-1">We'll contact you within 24 hours.</p>
        </div>
      </div>
    </div>

    <!-- Error Summary -->
    <div id="error-summary" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
      <div class="flex items-center mb-2">
        <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
        <strong>Please correct the following errors:</strong>
      </div>
      <ul id="error-list" class="list-disc list-inside text-sm space-y-1"></ul>
    </div>

    <!-- Warning Messages -->
    <div id="warning-summary" class="hidden bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-lg">
      <div class="flex items-center mb-2">
        <i class="fas fa-exclamation-triangle text-yellow-500 mr-2"></i>
        <strong>Suggestions:</strong>
      </div>
      <ul id="warning-list" class="list-disc list-inside text-sm space-y-1"></ul>
    </div>
  </div>

  <!-- Contact Form -->
  <form id={formId} class="space-y-6" action={action} method={method} novalidate>
    <!-- Name Fields -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <div class="form-group">
        <label for="firstName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          First Name <span class="text-red-500">*</span>
        </label>
        <input 
          type="text" 
          id="firstName" 
          name="firstName" 
          required 
          class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white" 
          placeholder="Enter your first name"
          autocomplete="given-name"
          aria-describedby="firstName-error"
        >
        <div id="firstName-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
        <div class="field-success text-green-600 text-sm mt-1 hidden">
          <i class="fas fa-check mr-1"></i>
          Looks good!
        </div>
      </div>

      <div class="form-group">
        <label for="lastName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Last Name <span class="text-red-500">*</span>
        </label>
        <input 
          type="text" 
          id="lastName" 
          name="lastName" 
          required 
          class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white" 
          placeholder="Enter your last name"
          autocomplete="family-name"
          aria-describedby="lastName-error"
        >
        <div id="lastName-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
        <div class="field-success text-green-600 text-sm mt-1 hidden">
          <i class="fas fa-check mr-1"></i>
          Looks good!
        </div>
      </div>
    </div>

    <!-- Email Field -->
    <div class="form-group">
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Email Address <span class="text-red-500">*</span>
      </label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        required 
        class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white" 
        placeholder="your@email.com"
        autocomplete="email"
        aria-describedby="email-error email-help"
      >
      <div id="email-help" class="text-xs text-gray-500 mt-1">We'll never share your email with anyone else.</div>
      <div id="email-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
      <div class="field-success text-green-600 text-sm mt-1 hidden">
        <i class="fas fa-check mr-1"></i>
        Valid email address
      </div>
    </div>

    <!-- Phone Field -->
    <div class="form-group">
      <label for="phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Phone Number
      </label>
      <input 
        type="tel" 
        id="phone" 
        name="phone" 
        class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white" 
        placeholder="(555) 123-4567"
        autocomplete="tel"
        aria-describedby="phone-error"
      >
      <div id="phone-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
      <div class="field-success text-green-600 text-sm mt-1 hidden">
        <i class="fas fa-check mr-1"></i>
        Valid phone number
      </div>
    </div>

    <!-- Service Selection -->
    <div class="form-group">
      <label for="service" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Service Needed
      </label>
      <select 
        id="service" 
        name="service" 
        class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        aria-describedby="service-error"
      >
        <option value="">Select a service</option>
        <option value="residential">Residential Construction</option>
        <option value="commercial">Commercial Construction</option>
        <option value="hvac">HVAC Services</option>
        <option value="renovation">Home Renovation</option>
        <option value="electrical">Electrical Services</option>
        <option value="plumbing">Plumbing Services</option>
        <option value="other">Other</option>
      </select>
      <div id="service-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
    </div>

    <!-- Message Field -->
    <div class="form-group">
      <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Project Description <span class="text-red-500">*</span>
      </label>
      <textarea 
        id="message" 
        name="message" 
        rows="4" 
        required
        maxlength="1000"
        class="form-input w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-200 resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-white" 
        placeholder="Tell us about your project..."
        aria-describedby="message-error message-counter"
      ></textarea>
      <div class="flex justify-between items-center mt-1">
        <div id="message-error" class="field-error text-red-600 text-sm hidden"></div>
        <div id="message-counter" class="text-xs text-gray-500">
          <span id="message-count">0</span>/1000 characters
        </div>
      </div>
      <div class="field-success text-green-600 text-sm mt-1 hidden">
        <i class="fas fa-check mr-1"></i>
        Good description length
      </div>
    </div>

    <!-- Privacy Consent -->
    <div class="form-group">
      <label class="flex items-start space-x-3">
        <input 
          type="checkbox" 
          id="privacy" 
          name="privacy" 
          required
          class="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
        >
        <span class="text-sm text-gray-700 dark:text-gray-300">
          I agree to the <a href="/privacy" class="text-blue-600 hover:underline">Privacy Policy</a> 
          and consent to being contacted about my inquiry. <span class="text-red-500">*</span>
        </span>
      </label>
      <div id="privacy-error" class="field-error text-red-600 text-sm mt-1 hidden"></div>
    </div>

    <!-- Submit Button -->
    <div class="form-group">
      <button 
        type="submit" 
        id="submit-button"
        class="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center space-x-2 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        <span class="submit-text">
          <i class="fas fa-paper-plane mr-2"></i>
          Send Message
        </span>
        <span class="submit-loading hidden">
          <i class="fas fa-spinner fa-spin mr-2"></i>
          Sending...
        </span>
      </button>
    </div>

    <!-- Debug Information (Development Only) -->
    {showDebugInfo && (
      <details class="debug-info bg-gray-50 border rounded p-4 mt-6">
        <summary class="cursor-pointer font-semibold text-gray-700 mb-2">
          Debug Information
        </summary>
        <div class="text-xs text-gray-600 space-y-2">
          <div><strong>Form ID:</strong> {formId}</div>
          <div><strong>Validation:</strong> Real-time enabled</div>
          <div><strong>Error Boundary:</strong> Active</div>
          <div id="debug-validation" class="font-mono bg-white p-2 rounded">
            Form validation details will appear here...
          </div>
        </div>
      </details>
    )}
  </form>
</div>

<script is:inline define:vars={{ formId, showDebugInfo }}>
  document.addEventListener('DOMContentLoaded', function() {
    // Enhanced Contact Form Controller
    class EnhancedContactForm {
      constructor(formId) {
        this.form = document.getElementById(formId);
        this.validator = null;
        this.isSubmitting = false;
        this.debugMode = showDebugInfo;
        
        if (!this.form) {
          console.error('Contact form not found:', formId);
          return;
        }
        
        this.init();
      }
      
      async init() {
        try {
          // Initialize validator (we'll create a simple one inline since imports don't work here)
          this.setupValidation();
          this.setupEventListeners();
          this.setupCharacterCounter();
          
          if (this.debugMode) {
            this.setupDebugMode();
          }
          
          console.log('Enhanced contact form initialized successfully');
        } catch (error) {
          console.error('Failed to initialize contact form:', error);
          this.showErrorMessage('Form initialization failed. Please refresh the page.');
        }
      }
      
      setupValidation() {
        // Simple inline validation rules
        this.validationRules = {
          firstName: {
            required: true,
            minLength: 2,
            maxLength: 50
          },
          lastName: {
            required: true,
            minLength: 2,
            maxLength: 50
          },
          email: {
            required: true,
            pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
          },
          phone: {
            pattern: /^[\+]?[(]?[\d\s\-\(\)\.]{10,}$/
          },
          message: {
            required: true,
            minLength: 10,
            maxLength: 1000
          },
          privacy: {
            required: true
          }
        };
      }
      
      setupEventListeners() {
        // Form submission
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        
        // Real-time validation
        const inputs = this.form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
          const fieldName = input.name;
          
          // Debounced input validation
          let timeout;
          input.addEventListener('input', () => {
            clearTimeout(timeout);
            timeout = setTimeout(() => this.validateField(fieldName), 300);
          });
          
          // Immediate validation on blur
          input.addEventListener('blur', () => this.validateField(fieldName));
          
          // Special handling for checkbox
          if (input.type === 'checkbox') {
            input.addEventListener('change', () => this.validateField(fieldName));
          }
        });
      }
      
      setupCharacterCounter() {
        const messageField = this.form.querySelector('#message');
        const counter = document.getElementById('message-count');
        
        if (messageField && counter) {
          messageField.addEventListener('input', () => {
            const count = messageField.value.length;
            counter.textContent = count;
            
            // Update counter color based on usage
            const parent = counter.parentElement;
            parent.className = parent.className.replace(/text-\w+-\d+/, '');
            
            if (count > 900) {
              parent.classList.add('text-red-500');
            } else if (count > 800) {
              parent.classList.add('text-yellow-500');
            } else {
              parent.classList.add('text-gray-500');
            }
          });
        }
      }
      
      validateField(fieldName) {
        const field = this.form.querySelector(`[name="${fieldName}"]`);
        if (!field) return;
        
        const rules = this.validationRules[fieldName];
        if (!rules) return;
        
        const value = field.type === 'checkbox' ? field.checked : field.value.trim();
        const errors = [];
        const warnings = [];
        
        // Required validation
        if (rules.required && !value) {
          errors.push(`${this.getFieldLabel(fieldName)} is required`);
        }
        
        if (value) {
          // String validations
          if (typeof value === 'string') {
            if (rules.minLength && value.length < rules.minLength) {
              errors.push(`${this.getFieldLabel(fieldName)} must be at least ${rules.minLength} characters`);
            }
            
            if (rules.maxLength && value.length > rules.maxLength) {
              errors.push(`${this.getFieldLabel(fieldName)} must not exceed ${rules.maxLength} characters`);
            }
            
            if (rules.pattern && !rules.pattern.test(value)) {
              if (fieldName === 'email') {
                errors.push('Please enter a valid email address');
              } else if (fieldName === 'phone') {
                errors.push('Please enter a valid phone number');
              } else {
                errors.push(`${this.getFieldLabel(fieldName)} format is invalid`);
              }
            }
            
            // Warnings for improvements
            if (fieldName === 'firstName' || fieldName === 'lastName') {
              if (value === value.toLowerCase()) {
                warnings.push('Consider proper capitalization');
              }
            }
          }
        }
        
        this.displayFieldValidation(fieldName, errors, warnings);
        return errors.length === 0;
      }
      
      getFieldLabel(fieldName) {
        const labelMap = {
          firstName: 'First name',
          lastName: 'Last name',
          email: 'Email address',
          phone: 'Phone number',
          message: 'Project description',
          privacy: 'Privacy consent'
        };
        return labelMap[fieldName] || fieldName;
      }
      
      displayFieldValidation(fieldName, errors, warnings) {
        const field = this.form.querySelector(`[name="${fieldName}"]`);
        const errorElement = document.getElementById(`${fieldName}-error`);
        const successElement = field.parentElement.querySelector('.field-success');
        
        // Update field styling
        field.classList.remove('border-red-500', 'border-green-500');
        
        if (errors.length > 0) {
          field.classList.add('border-red-500');
          if (errorElement) {
            errorElement.textContent = errors[0];
            errorElement.classList.remove('hidden');
          }
          if (successElement) {
            successElement.classList.add('hidden');
          }
        } else if (field.value || field.checked) {
          field.classList.add('border-green-500');
          if (errorElement) {
            errorElement.classList.add('hidden');
          }
          if (successElement) {
            successElement.classList.remove('hidden');
          }
        } else {
          if (errorElement) {
            errorElement.classList.add('hidden');
          }
          if (successElement) {
            successElement.classList.add('hidden');
          }
        }
      }
      
      async handleSubmit(e) {
        e.preventDefault();
        
        if (this.isSubmitting) return;
        
        try {
          this.isSubmitting = true;
          this.updateSubmitButton(true);
          
          // Validate entire form
          const isValid = this.validateForm();
          
          if (!isValid) {
            this.showFormErrors();
            return;
          }
          
          // Simulate form submission
          await this.submitForm();
          
        } catch (error) {
          console.error('Form submission error:', error);
          this.showErrorMessage('Failed to send message. Please try again.');
          
          // Report error to global error manager if available
          if (window.errorManager) {
            window.errorManager.logError(error, 'ContactForm', { showToast: true });
          }
        } finally {
          this.isSubmitting = false;
          this.updateSubmitButton(false);
        }
      }
      
      validateForm() {
        const fieldNames = Object.keys(this.validationRules);
        let isValid = true;
        
        fieldNames.forEach(fieldName => {
          const fieldValid = this.validateField(fieldName);
          if (!fieldValid) {
            isValid = false;
          }
        });
        
        return isValid;
      }
      
      showFormErrors() {
        const errorElements = this.form.querySelectorAll('.field-error:not(.hidden)');
        const errors = Array.from(errorElements).map(el => el.textContent);
        
        const errorSummary = document.getElementById('error-summary');
        const errorList = document.getElementById('error-list');
        
        if (errorSummary && errorList && errors.length > 0) {
          errorList.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
          errorSummary.classList.remove('hidden');
          errorSummary.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      async submitForm() {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Simulate success (in real implementation, handle actual submission)
        this.showSuccessMessage();
        this.resetForm();
      }
      
      showSuccessMessage() {
        document.getElementById('success-message')?.classList.remove('hidden');
        document.getElementById('error-summary')?.classList.add('hidden');
        document.getElementById('warning-summary')?.classList.add('hidden');
      }
      
      showErrorMessage(message) {
        const errorSummary = document.getElementById('error-summary');
        const errorList = document.getElementById('error-list');
        
        if (errorSummary && errorList) {
          errorList.innerHTML = `<li>${message}</li>`;
          errorSummary.classList.remove('hidden');
        }
      }
      
      resetForm() {
        this.form.reset();
        
        // Clear all validation states
        const fields = this.form.querySelectorAll('input, select, textarea');
        fields.forEach(field => {
          field.classList.remove('border-red-500', 'border-green-500');
        });
        
        // Hide all error and success messages
        const messages = this.form.querySelectorAll('.field-error, .field-success');
        messages.forEach(msg => msg.classList.add('hidden'));
        
        // Reset character counter
        document.getElementById('message-count').textContent = '0';
      }
      
      updateSubmitButton(loading) {
        const button = document.getElementById('submit-button');
        const text = button.querySelector('.submit-text');
        const loadingText = button.querySelector('.submit-loading');
        
        button.disabled = loading;
        
        if (loading) {
          text.classList.add('hidden');
          loadingText.classList.remove('hidden');
        } else {
          text.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      }
      
      setupDebugMode() {
        const debugElement = document.getElementById('debug-validation');
        if (!debugElement) return;
        
        // Monitor form state changes
        const inputs = this.form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
          input.addEventListener('input', () => {
            this.updateDebugInfo();
          });
        });
        
        this.updateDebugInfo();
      }
      
      updateDebugInfo() {
        const debugElement = document.getElementById('debug-validation');
        if (!debugElement) return;
        
        const formData = new FormData(this.form);
        const data = {};
        for (const [key, value] of formData.entries()) {
          data[key] = value;
        }
        
        debugElement.innerHTML = `
          <div><strong>Form Data:</strong></div>
          <pre>${JSON.stringify(data, null, 2)}</pre>
          <div><strong>Validation State:</strong> ${this.validateForm() ? 'Valid' : 'Invalid'}</div>
          <div><strong>Last Updated:</strong> ${new Date().toLocaleTimeString()}</div>
        `;
      }
    }
    
    // Initialize the form
    new EnhancedContactForm(formId);
  });
</script>

<style>
  .form-input:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
  }
  
  .form-input.border-red-500:focus {
    box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.3);
  }
  
  .form-input.border-green-500:focus {
    box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.3);
  }
  
  .debug-info {
    font-family: 'Courier New', monospace;
  }
</style>

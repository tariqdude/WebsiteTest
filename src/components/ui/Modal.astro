---
export interface Props {
  id: string;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  backdrop?: 'static' | 'blur' | 'dark';
  position?: 'center' | 'top' | 'bottom';
  closable?: boolean;
  class?: string;
}

const {
  id,
  title,
  size = 'md',
  backdrop = 'blur',
  position = 'center',
  closable = true,
  class: additionalClasses = '',
  ...props
} = Astro.props;

const sizeClasses = {
  sm: 'max-w-md',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  xl: 'max-w-4xl',
  full: 'max-w-full h-full'
};

const backdropClasses = {
  static: 'bg-black/50',
  blur: 'bg-black/30 backdrop-blur-sm',
  dark: 'bg-black/70'
};

const positionClasses = {
  center: 'items-center justify-center',
  top: 'items-start justify-center pt-20',
  bottom: 'items-end justify-center pb-20'
};

const modalClasses = [
  'fixed inset-0 z-50 flex transition-all duration-300 opacity-0 invisible',
  positionClasses[position],
  backdropClasses[backdrop],
  'modal-backdrop'
].filter(Boolean).join(' ');

const dialogClasses = [
  'relative w-full mx-4 bg-white rounded-2xl shadow-2xl',
  'transform transition-all duration-300 scale-95',
  sizeClasses[size],
  size === 'full' ? 'h-full' : 'max-h-[90vh] overflow-hidden',
  additionalClasses
].filter(Boolean).join(' ');
---

<!-- Modal Backdrop -->
<div 
  id={id}
  class={modalClasses}
  data-modal
  role="dialog" 
  aria-hidden="true"
  aria-labelledby={title ? `${id}-title` : undefined}
  {...props}
>
  <!-- Modal Dialog -->
  <div class={dialogClasses} role="document">
    {title && (
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-6 border-b border-brand-neutral-200">
        <h2 id={`${id}-title`} class="text-xl font-semibold text-brand-neutral-900">
          {title}
        </h2>
        {closable && (
          <button 
            type="button" 
            class="w-8 h-8 flex items-center justify-center rounded-full hover:bg-brand-neutral-100 transition-colors duration-200"
            data-modal-close
            aria-label="Close modal"
          >
            <i class="fas fa-times text-brand-neutral-400 hover:text-brand-neutral-600"></i>
          </button>
        )}
      </div>
    )}
    
    <!-- Modal Body -->
    <div class={`p-6 ${size === 'full' ? 'flex-1 overflow-auto' : ''}`}>
      <slot />
    </div>
    
    <!-- Modal Footer (if provided) -->
    <slot name="footer" />
  </div>
</div>

<style>
  /* Modal Animation States */
  .modal-backdrop.modal-open {
    opacity: 1;
    visibility: visible;
  }
  
  .modal-backdrop.modal-open .relative {
    transform: scale(1);
  }
  
  /* Prevent body scroll when modal is open */
  .modal-open-body {
    overflow: hidden;
  }
</style>

<script>
  // Modal functionality
  class Modal {
    constructor(element) {
      this.modal = element;
      this.backdrop = element;
      this.closeButtons = element.querySelectorAll('[data-modal-close]');
      this.isOpen = false;
      
      this.init();
    }
    
    init() {
      // Close button event listeners
      this.closeButtons.forEach(btn => {
        btn.addEventListener('click', () => this.close());
      });
      
      // Backdrop click to close (if not static)
      if (!this.modal.classList.contains('backdrop-static')) {
        this.backdrop.addEventListener('click', (e) => {
          if (e.target === this.backdrop) {
            this.close();
          }
        });
      }
      
      // Escape key to close
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });
    }
    
    open() {
      this.isOpen = true;
      this.modal.classList.add('modal-open');
      document.body.classList.add('modal-open-body');
      this.modal.setAttribute('aria-hidden', 'false');
      
      // Focus management
      const firstFocusable = this.modal.querySelector('button, input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (firstFocusable) {
        setTimeout(() => firstFocusable.focus(), 100);
      }
      
      // Dispatch custom event
      this.modal.dispatchEvent(new CustomEvent('modal:opened', { 
        detail: { modal: this } 
      }));
    }
    
    close() {
      this.isOpen = false;
      this.modal.classList.remove('modal-open');
      document.body.classList.remove('modal-open-body');
      this.modal.setAttribute('aria-hidden', 'true');
      
      // Dispatch custom event
      this.modal.dispatchEvent(new CustomEvent('modal:closed', { 
        detail: { modal: this } 
      }));
    }
    
    toggle() {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }
  }

  // Initialize modals when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('[data-modal]');
    window.modals = new Map();
    
    modals.forEach(modalElement => {
      const modal = new Modal(modalElement);
      window.modals.set(modalElement.id, modal);
    });
  });

  // Global functions for external access
  window.openModal = function(id) {
    const modal = window.modals?.get(id);
    if (modal) modal.open();
  };

  window.closeModal = function(id) {
    const modal = window.modals?.get(id);
    if (modal) modal.close();
  };

  window.toggleModal = function(id) {
    const modal = window.modals?.get(id);
    if (modal) modal.toggle();
  };
</script>

---
export interface Props {
  type?: 'text' | 'email' | 'tel' | 'password' | 'number' | 'url' | 'search' | 'textarea';
  placeholder?: string;
  label?: string;
  error?: string;
  helper?: string;
  required?: boolean;
  disabled?: boolean;
  variant?: 'default' | 'filled' | 'underline';
  size?: 'sm' | 'md' | 'lg';
  icon?: string;
  iconPosition?: 'left' | 'right';
  rows?: number;
  name?: string;
  id?: string;
  value?: string;
  class?: string;
}

const {
  type = 'text',
  placeholder,
  label,
  error,
  helper,
  required = false,
  disabled = false,
  variant = 'default',
  size = 'md',
  icon,
  iconPosition = 'left',
  rows = 4,
  name,
  id,
  value,
  class: additionalClasses = '',
  ...props
} = Astro.props;

const inputId = id || name || `input-${Math.random().toString(36).substr(2, 9)}`;

const variantClasses = {
  default: `border-2 border-brand-neutral-200 rounded-lg bg-white focus:border-brand-primary-500 focus:ring-2 focus:ring-brand-primary-100 ${error ? 'border-red-500' : ''}`,
  filled: `border-0 bg-brand-neutral-100 rounded-lg focus:bg-white focus:ring-2 focus:ring-brand-primary-100 ${error ? 'bg-red-50' : ''}`,
  underline: `border-0 border-b-2 border-brand-neutral-200 rounded-none bg-transparent focus:border-brand-primary-500 ${error ? 'border-red-500' : ''}`
};

const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-3 text-base',
  lg: 'px-5 py-4 text-lg'
};

const baseClasses = `w-full font-sans transition-all duration-200 placeholder:text-brand-neutral-400 focus:outline-none ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`;

const inputClasses = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  icon && iconPosition === 'left' ? 'pl-10' : '',
  icon && iconPosition === 'right' ? 'pr-10' : '',
  additionalClasses
].filter(Boolean).join(' ');

const labelClasses = `block text-sm font-medium text-brand-neutral-700 mb-1 ${required ? "after:content-['*'] after:text-red-500 after:ml-1" : ''}`;
---

<div class="w-full">
  {label && (
    <label for={inputId} class={labelClasses}>
      {label}
    </label>
  )}
  
  <div class="relative">
    {icon && (
      <div class={`absolute inset-y-0 ${iconPosition === 'left' ? 'left-0 pl-3' : 'right-0 pr-3'} flex items-center pointer-events-none`}>
        <i class={`${icon} text-brand-neutral-400`}></i>
      </div>
    )}
    
    {type === 'textarea' ? (
      <textarea
        id={inputId}
        name={name}
        placeholder={placeholder}
        required={required}
        disabled={disabled}
        rows={rows}
        class={inputClasses}
        {...props}
      >{value}</textarea>
    ) : (
      <input
        type={type}
        id={inputId}
        name={name}
        placeholder={placeholder}
        required={required}
        disabled={disabled}
        value={value}
        class={inputClasses}
        {...props}
      />
    )}
  </div>
  
  {error && (
    <p class="mt-1 text-sm text-red-600 flex items-center">
      <i class="fas fa-exclamation-circle mr-1"></i>
      {error}
    </p>
  )}
  
  {helper && !error && (
    <p class="mt-1 text-sm text-brand-neutral-500">
      {helper}
    </p>
  )}
</div>

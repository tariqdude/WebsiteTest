---
export interface Props {
  title?: string;
  subtitle?: string;
  variant?: 'default' | 'modal' | 'inline';
  showToast?: boolean;
  class?: string;
}

const {
  title = "Get Your Free Quote",
  subtitle = "Fill out the form below and we'll get back to you within 24 hours.",
  variant = 'default',
  showToast = true,
  class: additionalClasses = '',
  ...props
} = Astro.props;

const formClasses = variant === 'modal' ? 'space-y-4' : 'space-y-6';
---

<div class={`contact-form ${additionalClasses}`} {...props}>
  {variant !== 'inline' && (
    <div class="mb-6">
      <h3 class="text-xl font-bold text-brand-neutral-900 mb-2">{title}</h3>
      <p class="text-brand-neutral-600">{subtitle}</p>
    </div>
  )}

  <form 
    class={formClasses} 
    data-contact-form
    novalidate
  >
    <!-- Name Fields -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
      <div class="form-group">
        <label for="firstName" class="block text-sm font-medium text-brand-neutral-700 mb-2">
          First Name <span class="text-red-500">*</span>
        </label>
        <input 
          type="text" 
          id="firstName" 
          name="firstName" 
          required
          class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200"
          placeholder="John"
        />
        <div class="form-error hidden mt-1 text-sm text-red-600"></div>
      </div>
      
      <div class="form-group">
        <label for="lastName" class="block text-sm font-medium text-brand-neutral-700 mb-2">
          Last Name <span class="text-red-500">*</span>
        </label>
        <input 
          type="text" 
          id="lastName" 
          name="lastName" 
          required
          class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200"
          placeholder="Doe"
        />
        <div class="form-error hidden mt-1 text-sm text-red-600"></div>
      </div>
    </div>

    <!-- Contact Fields -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
      <div class="form-group">
        <label for="email" class="block text-sm font-medium text-brand-neutral-700 mb-2">
          Email Address <span class="text-red-500">*</span>
        </label>
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i class="fas fa-envelope text-brand-neutral-400"></i>
          </div>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required
            class="form-input w-full pl-10 pr-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200"
            placeholder="john@example.com"
          />
        </div>
        <div class="form-error hidden mt-1 text-sm text-red-600"></div>
      </div>
      
      <div class="form-group">
        <label for="phone" class="block text-sm font-medium text-brand-neutral-700 mb-2">
          Phone Number
        </label>
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i class="fas fa-phone text-brand-neutral-400"></i>
          </div>
          <input 
            type="tel" 
            id="phone" 
            name="phone"
            class="form-input w-full pl-10 pr-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200"
            placeholder="(555) 123-4567"
          />
        </div>
        <div class="form-error hidden mt-1 text-sm text-red-600"></div>
      </div>
    </div>

    <!-- Service Selection -->
    <div class="form-group">
      <label for="service" class="block text-sm font-medium text-brand-neutral-700 mb-2">
        Service Needed
      </label>
      <div class="relative">
        <select 
          id="service" 
          name="service"
          class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200 appearance-none"
        >
          <option value="">Select a service</option>
          <option value="residential">Residential Construction</option>
          <option value="commercial">Commercial Construction</option>
          <option value="hvac">HVAC Services</option>
          <option value="renovation">Home Renovation</option>
          <option value="electrical">Electrical Services</option>
          <option value="plumbing">Plumbing Services</option>
          <option value="emergency">Emergency Services</option>
          <option value="other">Other</option>
        </select>
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
          <i class="fas fa-chevron-down text-brand-neutral-400"></i>
        </div>
      </div>
      <div class="form-error hidden mt-1 text-sm text-red-600"></div>
    </div>

    <!-- Budget Range -->
    <div class="form-group">
      <label for="budget" class="block text-sm font-medium text-brand-neutral-700 mb-2">
        Estimated Budget Range
      </label>
      <div class="relative">
        <select 
          id="budget" 
          name="budget"
          class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200 appearance-none"
        >
          <option value="">Select budget range</option>
          <option value="under-5k">Under $5,000</option>
          <option value="5k-15k">$5,000 - $15,000</option>
          <option value="15k-50k">$15,000 - $50,000</option>
          <option value="50k-100k">$50,000 - $100,000</option>
          <option value="100k-plus">$100,000+</option>
          <option value="not-sure">Not sure yet</option>
        </select>
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
          <i class="fas fa-chevron-down text-brand-neutral-400"></i>
        </div>
      </div>
      <div class="form-error hidden mt-1 text-sm text-red-600"></div>
    </div>

    <!-- Timeline -->
    <div class="form-group">
      <label for="timeline" class="block text-sm font-medium text-brand-neutral-700 mb-2">
        Project Timeline
      </label>
      <div class="relative">
        <select 
          id="timeline" 
          name="timeline"
          class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200 appearance-none"
        >
          <option value="">When do you need this completed?</option>
          <option value="asap">As soon as possible</option>
          <option value="1-month">Within 1 month</option>
          <option value="1-3-months">1-3 months</option>
          <option value="3-6-months">3-6 months</option>
          <option value="6-months-plus">6+ months</option>
          <option value="flexible">Timeline is flexible</option>
        </select>
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
          <i class="fas fa-chevron-down text-brand-neutral-400"></i>
        </div>
      </div>
      <div class="form-error hidden mt-1 text-sm text-red-600"></div>
    </div>

    <!-- Project Description -->
    <div class="form-group">
      <label for="message" class="block text-sm font-medium text-brand-neutral-700 mb-2">
        Project Description <span class="text-red-500">*</span>
      </label>
      <textarea 
        id="message" 
        name="message" 
        rows="4" 
        required
        class="form-input w-full px-4 py-3 border border-brand-neutral-300 rounded-lg focus:ring-2 focus:ring-brand-primary-500 focus:border-transparent transition-all duration-200 resize-none"
        placeholder="Please describe your project, including any specific requirements, preferences, or questions you may have..."
      ></textarea>
      <div class="form-error hidden mt-1 text-sm text-red-600"></div>
      <div class="mt-1 text-xs text-brand-neutral-500">
        Character count: <span class="char-count">0</span> / 1000
      </div>
    </div>

    <!-- Consent Checkbox -->
    <div class="form-group">
      <label class="flex items-start space-x-3">
        <input 
          type="checkbox" 
          id="consent" 
          name="consent" 
          required
          class="mt-1 w-4 h-4 text-brand-primary-600 border-brand-neutral-300 rounded focus:ring-2 focus:ring-brand-primary-500"
        />
        <span class="text-sm text-brand-neutral-600">
          I agree to be contacted by ProBuild Construction regarding my project inquiry. 
          <a href="#" class="text-brand-primary-600 hover:text-brand-primary-500 underline">Privacy Policy</a>
          <span class="text-red-500">*</span>
        </span>
      </label>
      <div class="form-error hidden mt-1 text-sm text-red-600"></div>
    </div>

    <!-- Submit Button -->
    <button 
      type="submit" 
      class="submit-btn w-full bg-gradient-to-r from-brand-primary-600 to-brand-primary-700 text-white font-semibold py-3 px-6 rounded-lg hover:from-brand-primary-700 hover:to-brand-primary-800 focus:outline-none focus:ring-4 focus:ring-brand-primary-100 transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
    >
      <span class="btn-text flex items-center justify-center">
        <i class="fas fa-paper-plane mr-2"></i>
        Send Message & Get Free Quote
      </span>
      <span class="btn-loading hidden items-center justify-center">
        <i class="fas fa-spinner animate-spin mr-2"></i>
        Sending...
      </span>
    </button>

    <!-- Success Message -->
    <div class="success-message hidden p-4 bg-green-50 border border-green-200 rounded-lg">
      <div class="flex items-center">
        <i class="fas fa-check-circle text-green-500 mr-3"></i>
        <div>
          <h4 class="text-sm font-medium text-green-800">Message sent successfully!</h4>
          <p class="text-sm text-green-700 mt-1">We'll get back to you within 24 hours during business days.</p>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div class="error-message hidden p-4 bg-red-50 border border-red-200 rounded-lg">
      <div class="flex items-center">
        <i class="fas fa-exclamation-circle text-red-500 mr-3"></i>
        <div>
          <h4 class="text-sm font-medium text-red-800">Error sending message</h4>
          <p class="text-sm text-red-700 mt-1">Please try again or call us directly at (555) 123-4567.</p>
        </div>
      </div>
    </div>

    <p class="text-xs text-brand-neutral-500 text-center mt-4">
      <span class="text-red-500">*</span> Required fields. We respect your privacy and will never share your information.
    </p>
  </form>
</div>

<script>
  // Enhanced Contact Form Handler
  class ContactForm {
    constructor(form) {
      this.form = form;
      this.submitBtn = form.querySelector('.submit-btn');
      this.btnText = form.querySelector('.btn-text');
      this.btnLoading = form.querySelector('.btn-loading');
      this.successMessage = form.querySelector('.success-message');
      this.errorMessage = form.querySelector('.error-message');
      this.messageTextarea = form.querySelector('#message');
      this.charCount = form.querySelector('.char-count');
      
      this.init();
    }

    init() {
      // Form submission
      this.form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });

      // Real-time validation
      const inputs = this.form.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        input.addEventListener('blur', () => this.validateField(input));
        input.addEventListener('input', () => this.clearFieldError(input));
      });

      // Character count for message
      if (this.messageTextarea && this.charCount) {
        this.messageTextarea.addEventListener('input', () => {
          const count = this.messageTextarea.value.length;
          this.charCount.textContent = count;
          
          if (count > 1000) {
            this.charCount.parentElement.classList.add('text-red-500');
          } else {
            this.charCount.parentElement.classList.remove('text-red-500');
          }
        });
      }

      // Phone number formatting
      const phoneInput = this.form.querySelector('#phone');
      if (phoneInput) {
        phoneInput.addEventListener('input', (e) => {
          let value = e.target.value.replace(/\D/g, '');
          if (value.length >= 6) {
            value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`;
          } else if (value.length >= 3) {
            value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
          }
          e.target.value = value;
        });
      }
    }

    async handleSubmit() {
      // Reset messages
      this.hideMessages();
      
      // Validate form
      if (!this.validateForm()) {
        return;
      }

      // Show loading state
      this.setLoadingState(true);

      try {
        // Get form data
        const formData = new FormData(this.form);
        const data = Object.fromEntries(formData.entries());

        // Simulate API call (replace with actual endpoint)
        await this.submitForm(data);

        // Show success
        this.showSuccess();
        this.form.reset();
        
        // Show toast notification if available
        if (window.toast) {
          window.toast.success('Message sent successfully! We\'ll contact you within 24 hours.');
        }
        
      } catch (error) {
        console.error('Form submission error:', error);
        this.showError();
        
        if (window.toast) {
          window.toast.error('Failed to send message. Please try again.');
        }
      } finally {
        this.setLoadingState(false);
      }
    }

    async submitForm(data) {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Here you would normally send to your backend
      // const response = await fetch('/api/contact', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(data)
      // });
      
      // For demo, randomly succeed or fail
      if (Math.random() > 0.1) {
        return { success: true };
      } else {
        throw new Error('Simulated error');
      }
    }

    validateForm() {
      let isValid = true;
      const requiredFields = this.form.querySelectorAll('input[required], textarea[required]');
      
      requiredFields.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });

      return isValid;
    }

    validateField(field) {
      const value = field.value.trim();
      const fieldGroup = field.closest('.form-group');
      const errorElement = fieldGroup.querySelector('.form-error');
      
      // Clear previous error
      this.clearFieldError(field);
      
      // Required field validation
      if (field.hasAttribute('required') && !value) {
        this.showFieldError(field, 'This field is required');
        return false;
      }
      
      // Email validation
      if (field.type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          this.showFieldError(field, 'Please enter a valid email address');
          return false;
        }
      }
      
      // Phone validation (basic)
      if (field.type === 'tel' && value) {
        const phoneRegex = /^\(\d{3}\)\s\d{3}-\d{4}$/;
        if (!phoneRegex.test(value) && value.replace(/\D/g, '').length !== 10) {
          this.showFieldError(field, 'Please enter a valid phone number');
          return false;
        }
      }
      
      // Message length validation
      if (field.id === 'message' && value.length > 1000) {
        this.showFieldError(field, 'Message must be less than 1000 characters');
        return false;
      }
      
      return true;
    }

    showFieldError(field, message) {
      const fieldGroup = field.closest('.form-group');
      const errorElement = fieldGroup.querySelector('.form-error');
      
      field.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
      field.classList.remove('focus:ring-brand-primary-500', 'focus:border-transparent');
      
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
    }

    clearFieldError(field) {
      const fieldGroup = field.closest('.form-group');
      const errorElement = fieldGroup.querySelector('.form-error');
      
      field.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
      field.classList.add('focus:ring-brand-primary-500', 'focus:border-transparent');
      
      errorElement.classList.add('hidden');
    }

    setLoadingState(loading) {
      if (loading) {
        this.submitBtn.disabled = true;
        this.btnText.classList.add('hidden');
        this.btnLoading.classList.remove('hidden');
        this.btnLoading.classList.add('flex');
      } else {
        this.submitBtn.disabled = false;
        this.btnText.classList.remove('hidden');
        this.btnLoading.classList.add('hidden');
        this.btnLoading.classList.remove('flex');
      }
    }

    showSuccess() {
      this.successMessage.classList.remove('hidden');
      this.successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    showError() {
      this.errorMessage.classList.remove('hidden');
      this.errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    hideMessages() {
      this.successMessage.classList.add('hidden');
      this.errorMessage.classList.add('hidden');
    }
  }

  // Initialize contact forms when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('[data-contact-form]');
    forms.forEach(form => {
      new ContactForm(form);
    });
  });
</script>

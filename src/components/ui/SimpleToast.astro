---
export interface Props {
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
  class?: string;
}

const { 
  position = 'top-right',
  class: additionalClasses = '' 
} = Astro.props;

const positionClasses = {
  'top-right': 'top-4 right-4',
  'top-left': 'top-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4',
  'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
  'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2'
};
---

<div 
  id="toast-container" 
  class={`fixed ${positionClasses[position]} z-50 space-y-2 pointer-events-none ${additionalClasses}`}
  data-position={position}
>
  <!-- Toast messages will be dynamically inserted here -->
</div>

<script is:inline>
  // Simple toast system
  window.showToast = function(message, type = 'info', duration = 5000) {
    const container = document.getElementById('toast-container');
    if (!container) return;

    const toast = document.createElement('div');
    const toastId = 'toast-' + Date.now() + '-' + Math.random().toString(36).substring(2, 11);
    toast.id = toastId;
    
    const typeClasses = {
      success: 'bg-green-500 text-white',
      error: 'bg-red-500 text-white',
      warning: 'bg-yellow-500 text-black',
      info: 'bg-blue-500 text-white'
    };
    
    const icons = {
      success: 'fas fa-check-circle',
      error: 'fas fa-exclamation-circle',
      warning: 'fas fa-exclamation-triangle',
      info: 'fas fa-info-circle'
    };
    
    toast.className = `pointer-events-auto relative overflow-hidden rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0 ${typeClasses[type] || typeClasses.info} p-4 max-w-sm`;
    
    toast.innerHTML = `
      <div class="flex items-center space-x-3">
        <i class="${icons[type] || icons.info}"></i>
        <span class="font-medium">${message}</span>
        <button onclick="window.hideToast('${toastId}')" class="ml-auto text-current opacity-70 hover:opacity-100">
          <i class="fas fa-times"></i>
        </button>
      </div>
    `;
    
    container.appendChild(toast);
    
    // Trigger animation
    setTimeout(() => {
      toast.classList.remove('translate-x-full', 'opacity-0');
    }, 10);
    
    // Auto hide
    if (duration > 0) {
      setTimeout(() => {
        window.hideToast(toastId);
      }, duration);
    }
    
    return toastId;
  };

  window.hideToast = function(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
      toast.classList.add('translate-x-full', 'opacity-0');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }
  };

  // Create global toast methods
  window.toast = {
    success: (message, duration) => window.showToast(message, 'success', duration),
    error: (message, duration) => window.showToast(message, 'error', duration),
    warning: (message, duration) => window.showToast(message, 'warning', duration),
    info: (message, duration) => window.showToast(message, 'info', duration)
  };
</script>

---
export interface Props {
  position?: 'top' | 'bottom';
  height?: 'thin' | 'medium' | 'thick';
  color?: 'primary' | 'secondary' | 'accent' | 'gradient';
  animated?: boolean;
  class?: string;
}

const {
  position = 'top',
  height = 'thin',
  color = 'primary',
  animated = true,
  class: additionalClasses = '',
  ...props
} = Astro.props;

const positionClasses = {
  top: 'top-0',
  bottom: 'bottom-0'
};

const heightClasses = {
  thin: 'h-1',
  medium: 'h-2',
  thick: 'h-3'
};

const colorClasses = {
  primary: 'bg-brand-primary-600',
  secondary: 'bg-brand-secondary-600',
  accent: 'bg-brand-accent-600',
  gradient: 'bg-gradient-to-r from-brand-primary-600 via-brand-secondary-600 to-brand-accent-600'
};

const progressClasses = [
  'fixed left-0 z-50 transition-all duration-300 origin-left',
  positionClasses[position],
  heightClasses[height],
  colorClasses[color],
  animated ? 'shadow-lg' : '',
  additionalClasses
].filter(Boolean).join(' ');
---

<!-- Progress Bar Container -->
<div class={`fixed left-0 ${positionClasses[position]} w-full ${heightClasses[height]} bg-brand-neutral-200 z-40 opacity-0 transition-opacity duration-300`} id="scroll-progress-container">
  <!-- Progress Bar -->
  <div 
    class={progressClasses}
    id="scroll-progress-bar"
    style="width: 0%"
    {...props}
  >
    {animated && (
      <!-- Shimmer effect -->
      <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-shimmer"></div>
    )}
  </div>
</div>

<script>
  // Scroll Progress Indicator Logic
  function updateScrollProgress() {
    const container = document.getElementById('scroll-progress-container');
    const progressBar = document.getElementById('scroll-progress-bar');
    
    if (!container || !progressBar) return;

    const scrollTop = window.scrollY;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    
    // Show/hide progress bar based on scroll position
    if (scrollTop > 100) {
      container.style.opacity = '1';
    } else {
      container.style.opacity = '0';
    }
    
    // Update progress bar width
    progressBar.style.width = `${Math.min(scrollPercent, 100)}%`;
    
    // Add pulse effect when reaching milestones
    if (scrollPercent >= 25 && scrollPercent < 26) {
      progressBar.style.transform = 'scaleY(1.5)';
      setTimeout(() => {
        progressBar.style.transform = 'scaleY(1)';
      }, 200);
    }
    
    if (scrollPercent >= 50 && scrollPercent < 51) {
      progressBar.style.transform = 'scaleY(1.5)';
      setTimeout(() => {
        progressBar.style.transform = 'scaleY(1)';
      }, 200);
    }
    
    if (scrollPercent >= 75 && scrollPercent < 76) {
      progressBar.style.transform = 'scaleY(1.5)';
      setTimeout(() => {
        progressBar.style.transform = 'scaleY(1)';
      }, 200);
    }
    
    if (scrollPercent >= 100) {
      progressBar.style.transform = 'scaleY(2)';
      progressBar.style.filter = 'drop-shadow(0 0 8px currentColor)';
      setTimeout(() => {
        progressBar.style.transform = 'scaleY(1)';
        progressBar.style.filter = 'none';
      }, 300);
    }
  }

  // Throttled scroll handler for better performance
  let ticking = false;
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateScrollProgress);
      ticking = true;
      setTimeout(() => { ticking = false; }, 16); // ~60fps
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateScrollProgress();
    window.addEventListener('scroll', requestTick, { passive: true });
    window.addEventListener('resize', updateScrollProgress, { passive: true });
  });
</script>

<style>
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
  
  .animate-shimmer {
    animation: shimmer 2s infinite;
  }
  
  #scroll-progress-bar {
    transition: width 0.1s ease-out, transform 0.2s ease-out, filter 0.3s ease-out;
  }
</style>

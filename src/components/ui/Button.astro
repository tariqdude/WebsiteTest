---
import { getButtonClasses } from '../utils/design-system.js';

export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  loading?: boolean;
  icon?: string;
  iconPosition?: 'left' | 'right';
  fullWidth?: boolean;
  magnetic?: boolean;
  glow?: boolean;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  fullWidth = false,
  magnetic = false,
  glow = false,
  class: additionalClasses = '',
  ...props
} = Astro.props;

const buttonClasses = getButtonClasses(variant, size);
const magneticClass = magnetic ? 'hover:animate-magnetic cursor-pointer' : '';
const glowClass = glow ? 'hover:animate-glow' : '';
const fullWidthClass = fullWidth ? 'w-full' : '';
const disabledClass = disabled ? 'opacity-50 cursor-not-allowed' : '';
const loadingClass = loading ? 'animate-pulse pointer-events-none' : '';

const finalClasses = `${buttonClasses} ${magneticClass} ${glowClass} ${fullWidthClass} ${disabledClass} ${loadingClass} ${additionalClasses}`.trim();

const Element = href ? 'a' : 'button';
const elementProps = href ? { href } : { type, disabled: disabled || loading };
---

<Element class={finalClasses} {...elementProps} {...props}>
  {loading ? (
    <div class="flex items-center justify-center">
      <div class="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
      <span>Loading...</span>
    </div>
  ) : (
    <div class="flex items-center justify-center gap-2">
      {icon && iconPosition === 'left' && (
        <i class={`${icon} ${size === 'sm' ? 'text-sm' : size === 'lg' ? 'text-xl' : 'text-base'}`}></i>
      )}
      <slot />
      {icon && iconPosition === 'right' && (
        <i class={`${icon} ${size === 'sm' ? 'text-sm' : size === 'lg' ? 'text-xl' : 'text-base'}`}></i>
      )}
    </div>
  )}
</Element>

<style>
  /* Magnetic effect variables */
  .hover\:animate-magnetic:hover {
    --x: 0;
    --y: 0;
  }
</style>

<script>
  // Magnetic button effect
  document.addEventListener('DOMContentLoaded', () => {
    const magneticButtons = document.querySelectorAll('.hover\\:animate-magnetic');
    
    magneticButtons.forEach((button: Element) => {
      const btn = button as HTMLElement;
      
      btn.addEventListener('mousemove', (e: MouseEvent) => {
        const rect = btn.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        btn.style.setProperty('--x', `${x * 0.1}px`);
        btn.style.setProperty('--y', `${y * 0.1}px`);
      });
      
      btn.addEventListener('mouseleave', () => {
        btn.style.setProperty('--x', '0px');
        btn.style.setProperty('--y', '0px');
      });
    });
  });
</script>

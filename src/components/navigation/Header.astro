---
import { navigationConfig } from '../../data/navigation';
import { siteConfig } from '../../data/site';

export interface Props {
  currentPath?: string;
  className?: string;
}

const { currentPath = '', className = '' } = Astro.props;
const items = navigationConfig.main;
const logo = siteConfig.branding.logo;
---

<header 
  id="main-header" 
  class={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${className}`}
>
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16 md:h-20">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a 
          href="/" 
          class="flex items-center space-x-2 group"
          aria-label="Home"
        >
          <div class="w-8 h-8 md:w-10 md:h-10 bg-gradient-to-br from-primary-500 to-accent-500 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
            <svg class="w-5 h-5 md:w-6 md:h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
            </svg>
          </div>
          <span class="font-display font-bold text-xl md:text-2xl bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
            {siteConfig.business.name.split(' ')[0]}
          </span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex lg:items-center lg:space-x-8">
        {items.map((item) => (
          <div class="relative group">
            <a
              href={item.href}
              class={`
                flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200
                ${currentPath === item.href 
                  ? 'text-primary-600 bg-primary-50 dark:text-primary-400 dark:bg-primary-900/30' 
                  : 'text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-50 dark:hover:bg-gray-800/50'
                }
              `}
            >
              {item.name}
              {item.children && (
                <svg class="ml-1 h-3 w-3 transition-transform duration-200 group-hover:rotate-180" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
              )}
            </a>
            
            {item.children && (
              <div class="absolute left-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-xl shadow-lg ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform group-hover:translate-y-0 translate-y-2">
                <div class="py-2">
                  {item.children.map((child) => (
                    <a
                      href={child.href}
                      class="block px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-150"
                    >
                      {child.name}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <!-- Right side actions -->
      <div class="flex items-center space-x-4">
        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          type="button"
          class="p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
          aria-label="Toggle theme"
        >
          <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"/>
          </svg>
          <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"/>
          </svg>
        </button>

        <!-- CTA Button -->
        <a
          href="/contact"
          class="hidden sm:inline-flex items-center px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Get Started
        </a>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          type="button"
          class="lg:hidden p-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors duration-200"
          aria-label="Open menu"
          aria-expanded="false"
        >
          <svg id="menu-open-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
          </svg>
          <svg id="menu-close-icon" class="hidden w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div
      id="mobile-menu"
      class="lg:hidden fixed inset-0 top-16 bg-white dark:bg-gray-900 transform translate-x-full transition-transform duration-300 ease-in-out z-40"
    >
      <div class="px-4 py-6 space-y-4">
        {items.map((item) => (
          <div class="space-y-2">
            <a
              href={item.href}
              class={`
                block px-4 py-3 text-base font-medium rounded-lg transition-colors duration-200
                ${currentPath === item.href 
                  ? 'text-primary-600 bg-primary-50 dark:text-primary-400 dark:bg-primary-900/30' 
                  : 'text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-50 dark:hover:bg-gray-800/50'
                }
              `}
            >
              {item.name}
            </a>
            {item.children && (
              <div class="pl-4 space-y-2">
                {item.children.map((child) => (
                  <a
                    href={child.href}
                    class="block px-4 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors duration-200"
                  >
                    {child.name}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
        
        <!-- Mobile CTA -->
        <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
          <a
            href="/contact"
            class="block w-full text-center px-4 py-3 bg-primary-600 hover:bg-primary-700 text-white text-base font-medium rounded-lg transition-colors duration-200"
          >
            Get Started
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Header scroll effect
  let lastScrollY = window.scrollY;
  const header = document.getElementById('main-header');
  
  const updateHeader = () => {
    const currentScrollY = window.scrollY;
    
    if (currentScrollY > 50) {
      header?.classList.add('bg-white/95', 'dark:bg-gray-900/95', 'backdrop-blur-md', 'border-b', 'border-gray-200', 'dark:border-gray-800');
      header?.classList.remove('bg-transparent');
    } else {
      header?.classList.remove('bg-white/95', 'dark:bg-gray-900/95', 'backdrop-blur-md', 'border-b', 'border-gray-200', 'dark:border-gray-800');
      header?.classList.add('bg-transparent');
    }
    
    // Hide/show header on scroll
    if (currentScrollY > lastScrollY && currentScrollY > 100) {
      header?.classList.add('-translate-y-full');
    } else {
      header?.classList.remove('-translate-y-full');
    }
    
    lastScrollY = currentScrollY;
  };
  
  window.addEventListener('scroll', updateHeader, { passive: true });
  
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const darkIcon = document.getElementById('theme-toggle-dark-icon');
  const lightIcon = document.getElementById('theme-toggle-light-icon');
  
  const updateThemeIcons = (isDark: boolean) => {
    if (isDark) {
      darkIcon?.classList.add('hidden');
      lightIcon?.classList.remove('hidden');
    } else {
      darkIcon?.classList.remove('hidden');
      lightIcon?.classList.add('hidden');
    }
  };
  
  // Initialize theme icons
  updateThemeIcons(document.documentElement.classList.contains('dark'));
  
  themeToggle?.addEventListener('click', () => {
    const isDark = document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    updateThemeIcons(isDark);
  });
  
  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuOpenIcon = document.getElementById('menu-open-icon');
  const menuCloseIcon = document.getElementById('menu-close-icon');
  
  let isMenuOpen = false;
  
  const toggleMobileMenu = () => {
    isMenuOpen = !isMenuOpen;
    
    if (isMenuOpen) {
      mobileMenu?.classList.remove('translate-x-full');
      mobileMenu?.classList.add('translate-x-0');
      menuOpenIcon?.classList.add('hidden');
      menuCloseIcon?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    } else {
      mobileMenu?.classList.add('translate-x-full');
      mobileMenu?.classList.remove('translate-x-0');
      menuOpenIcon?.classList.remove('hidden');
      menuCloseIcon?.classList.add('hidden');
      document.body.style.overflow = '';
    }
    
    mobileMenuButton?.setAttribute('aria-expanded', isMenuOpen.toString());
  };
  
  mobileMenuButton?.addEventListener('click', toggleMobileMenu);
  
  // Close mobile menu when clicking outside
  mobileMenu?.addEventListener('click', (e) => {
    if (e.target === mobileMenu) {
      toggleMobileMenu();
    }
  });
  
  // Close mobile menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isMenuOpen) {
      toggleMobileMenu();
    }
  });
  
  // Close mobile menu on route change
  window.addEventListener('popstate', () => {
    if (isMenuOpen) {
      toggleMobileMenu();
    }
  });
</script>

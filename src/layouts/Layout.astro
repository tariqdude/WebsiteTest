---
import ScrollProgress from '../components/ui/ScrollProgress.astro';
import SimpleToast from '../components/ui/SimpleToast.astro';
import ThemeToggle from '../components/ui/ThemeToggle.astro';
import SEO from '../components/SEO.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noindex?: boolean;
}

const { title, description, image, noindex = false } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <meta name="theme-color" content="#1e40af" />
    <link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Enhanced SEO -->
    <SEO 
      title={title}
      description={description}
      image={image}
      noindex={noindex}
    />
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Apple PWA Meta Tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="ProBuild Construction" />
    <link rel="apple-touch-icon" href="/images/icon-192.png" />
    
    <!-- Microsoft PWA Meta Tags -->
    <meta name="msapplication-TileColor" content="#1e40af" />
    <meta name="msapplication-TileImage" content="/images/icon-144.png" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com">
    
    <!-- Google Fonts - Optimized loading -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    
    <!-- Font Awesome - Latest version -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer">
    
    <!-- Critical CSS for GitHub Pages -->
    <style>
      @import url('../styles/critical.css');
    </style>
    
    <!-- Enhanced Stylesheets -->
    <link rel="stylesheet" href="/src/styles/animations.css">
    <link rel="stylesheet" href="/src/styles/enhancements.css">
    <link rel="stylesheet" href="/src/styles/mobile.css">
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:image" content="/og-image.jpg">
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:title" content={title}>
    <meta property="twitter:description" content={description}>
    
    <!-- Schema.org markup -->
    <script type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "LocalBusiness",
      "name": "ProBuild Construction",
      "description": "Professional construction and HVAC services",
      "telephone": "+1-555-123-4567",
      "email": "info@probuildconstruction.com",
      "address": {
        "@type": "PostalAddress",
        "streetAddress": "123 Construction Ave",
        "addressLocality": "Builder City",
        "addressRegion": "BC",
        "postalCode": "12345"
      },
      "openingHours": "Mo-Fr 07:00-19:00, Sa 08:00-17:00",
      "priceRange": "$$"
    }
    </script>
  </head>
  <body class="bg-brand-light dark:bg-gray-900 font-sans antialiased overflow-x-hidden transition-colors duration-300">
    <!-- Scroll Progress Indicator -->
    <ScrollProgress position="top" height="medium" color="gradient" animated={true} />
    
    <!-- Toast Notifications -->
    <SimpleToast />
    
    <!-- Theme Toggle -->
    <ThemeToggle position="fixed" placement="top-right" />
    
    <div id="app">
      <slot />
    </div>
    
    <!-- Optimized JavaScript -->
    <script>
      // Enhanced mobile menu functionality
      class MobileMenu {
        menu: HTMLElement | null;
        overlay: HTMLElement | null;
        menuButton: HTMLElement | null;
        closeButton: HTMLElement | null;
        isOpen: boolean;

        constructor() {
          this.menu = document.getElementById('mobile-menu');
          this.overlay = document.getElementById('mobile-overlay');
          this.menuButton = document.querySelector('[data-mobile-menu-toggle]');
          this.closeButton = document.querySelector('[data-mobile-menu-close]');
          this.isOpen = false;
          this.init();
        }

        init(): void {
          this.menuButton?.addEventListener('click', () => this.toggle());
          this.closeButton?.addEventListener('click', () => this.close());
          this.overlay?.addEventListener('click', () => this.close());
          
          // Close on escape key
          document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
              this.close();
            }
          });
          
          // Handle window resize
          window.addEventListener('resize', () => {
            if (window.innerWidth >= 768 && this.isOpen) {
              this.close();
            }
          });
        }

        toggle(): void {
          this.isOpen ? this.close() : this.open();
        }

        open(): void {
          this.menu?.classList.remove('translate-x-full');
          this.overlay?.classList.remove('hidden');
          document.body.classList.add('overflow-hidden');
          this.isOpen = true;
        }

        close(): void {
          this.menu?.classList.add('translate-x-full');
          this.overlay?.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
          this.isOpen = false;
        }
      }

      // Enhanced smooth scrolling
      class SmoothScroll {
        constructor() {
          this.init();
        }

        init(): void {
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', (e) => {
              e.preventDefault();
              const href = anchor.getAttribute('href');
              if (href) {
                const targetId = href.substring(1);
                const targetElement = document.getElementById(targetId);
                
                if (targetElement) {
                  const offsetTop = targetElement.offsetTop - 80; // Account for fixed header
                  
                  window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                  });

                  // Close mobile menu if open
                  if ((window as any).mobileMenu && (window as any).mobileMenu.isOpen) {
                    (window as any).mobileMenu.close();
                  }
                }
              }
            });
          });
        }
      }

      // Intersection Observer for animations
      class AnimationObserver {
        observer: IntersectionObserver;

        constructor() {
          this.observer = new IntersectionObserver(
            (entries) => {
              entries.forEach(entry => {
                if (entry.isIntersecting) {
                  entry.target.classList.add('animate-fade-in');
                }
              });
            },
            { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
          );
          this.init();
        }

        init(): void {
          document.querySelectorAll('[data-animate]').forEach(el => {
            this.observer.observe(el);
          });
        }
      }

      // Google Maps with error handling
      function initMap(): void {
        try {
          const mapElement = document.getElementById('map');
          if (!mapElement || typeof (window as any).google === 'undefined') return;

          const mapOptions = {
            zoom: 15,
            center: { lat: 40.7128, lng: -74.0060 },
            styles: [
              {
                featureType: 'all',
                elementType: 'geometry.fill',
                stylers: [{ saturation: -80 }, { lightness: 20 }]
              },
              {
                featureType: 'road',
                elementType: 'geometry.stroke',
                stylers: [{ visibility: 'off' }]
              }
            ],
            disableDefaultUI: false,
            zoomControl: true,
            streetViewControl: false,
            fullscreenControl: true,
          };

          const map = new (window as any).google.maps.Map(mapElement, mapOptions);
          
          const marker = new (window as any).google.maps.Marker({
            position: { lat: 40.7128, lng: -74.0060 },
            map: map,
            title: 'ProBuild Construction Services',
            icon: {
              url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="40" height="40">
                  <path fill="#1e40af" d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z"/>
                  <circle fill="white" cx="12" cy="9" r="3"/>
                </svg>
              `),
            }
          });

          const infoWindow = new (window as any).google.maps.InfoWindow({
            content: `
              <div style="padding: 12px; font-family: Inter, sans-serif;">
                <h3 style="margin: 0 0 8px 0; color: #1e40af; font-weight: 600;">ProBuild Construction</h3>
                <p style="margin: 0 0 8px 0; color: #374151; font-size: 14px;">Professional Construction & HVAC Services</p>
                <p style="margin: 0; color: #6b7280; font-size: 12px;">ðŸ“ž (555) 123-4567</p>
              </div>
            `
          });

          marker.addListener('click', () => {
            infoWindow.open(map, marker);
          });

        } catch (error) {
          console.error('Map initialization failed:', error);
          const mapElement = document.getElementById('map');
          if (mapElement) {
            mapElement.innerHTML = `
              <div class="flex items-center justify-center h-full bg-gray-100 rounded-lg">
                <div class="text-center text-gray-500">
                  <i class="fas fa-map-marker-alt text-2xl mb-2"></i>
                  <p class="text-sm">123 Construction Ave<br>Builder City, BC 12345</p>
                </div>
              </div>
            `;
          }
        }
      }

      // Initialize everything when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        (window as any).mobileMenu = new MobileMenu();
        new SmoothScroll();
        new AnimationObserver();
        
        // Register service worker for PWA
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
              console.log('SW registration failed: ', registrationError);
            });
        }
        
        // Load Google Maps
        if (typeof (window as any).google !== 'undefined' && (window as any).google.maps) {
          initMap();
        }
      });

      // Handle Google Maps API load
      (window as any).initMap = initMap;
    </script>
    
    <!-- Google Maps API with callback -->
    <script async defer is:inline
      src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap&libraries=places&loading=async">
    </script>
  </body>
</html>

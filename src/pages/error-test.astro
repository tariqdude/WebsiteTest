---
/**
 * Error Handling System Test Page
 * Tests all error handling components and systems in development
 */

import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Section from '../components/ui/Section.astro';
import Typography from '../components/ui/Typography.astro';
import Card from '../components/ui/Card.astro';
import Button from '../components/ui/Button.astro';
import ErrorBoundary from '../components/ui/ErrorBoundary.astro';
import EnhancedContactForm from '../components/ui/EnhancedContactForm.astro';

// Only show in development
if (!import.meta.env.DEV) {
  return new Response('Not Found', { status: 404 });
}
---

<Layout 
  title="Error Handling Test Suite - Development"
  description="Test all error handling and debugging features"
  showDebugInfo={true}
>
  <Header />
  
  <!-- Test Suite Header -->
  <Section 
    background="brand-primary" 
    padding="xl" 
    containerSize="large"
    className="min-h-[30vh] flex items-center"
  >
    <div class="text-center text-white">
      <Typography variant="h1" className="mb-6">
        üõ†Ô∏è Error Handling Test Suite
      </Typography>
      <Typography variant="lead" className="mb-8 max-w-2xl mx-auto">
        Development-only page to test all error handling, validation, and debugging features
      </Typography>
      <div class="bg-yellow-600 text-yellow-100 px-4 py-2 rounded-lg inline-block">
        <i class="fas fa-exclamation-triangle mr-2"></i>
        This page is only available in development mode
      </div>
    </div>
  </Section>

  <!-- Error Boundary Tests -->
  <Section background="white" padding="2xl" containerSize="large">
    <Typography variant="h2" className="mb-8 text-center">Error Boundary Tests</Typography>
    
    <div class="grid md:grid-cols-2 gap-8 mb-12">
      <!-- Test 1: Controlled Error -->
      <Card className="p-6">
        <Typography variant="h4" className="mb-4">Test 1: Controlled JavaScript Error</Typography>
        <Typography variant="body" className="mb-4 text-gray-600">
          This button will throw a controlled error to test error boundaries.
        </Typography>
        <ErrorBoundary fallbackMessage="This error was caught by the error boundary!">
          <Button 
            onclick="throw new Error('Test error from error boundary test');"
            variant="danger"
            className="w-full"
          >
            Throw Test Error
          </Button>
        </ErrorBoundary>
      </Card>

      <!-- Test 2: Async Error -->
      <Card className="p-6">
        <Typography variant="h4" className="mb-4">Test 2: Async Error Handling</Typography>
        <Typography variant="body" className="mb-4 text-gray-600">
          Test async error handling and global error manager.
        </Typography>
        <Button 
          id="async-error-test"
          variant="warning"
          className="w-full"
        >
          Test Async Error
        </Button>
      </Card>
    </div>

    <!-- Test 3: Form Validation -->
    <Card className="p-6 mb-8">
      <Typography variant="h4" className="mb-4">Test 3: Advanced Form Validation</Typography>
      <Typography variant="body" className="mb-6 text-gray-600">
        Test the enhanced contact form with comprehensive validation.
      </Typography>
      <ErrorBoundary fallbackMessage="Form error boundary activated">
        <EnhancedContactForm showDebugInfo={true} />
      </ErrorBoundary>
    </Card>
  </Section>

  <!-- Network & API Tests -->
  <Section background="gray-50" padding="2xl" containerSize="large">
    <Typography variant="h2" className="mb-8 text-center">Network & API Error Tests</Typography>
    
    <div class="grid md:grid-cols-3 gap-6 mb-8">
      <Card className="p-6 text-center">
        <Typography variant="h5" className="mb-4">404 Error Test</Typography>
        <Button id="test-404" variant="outline" className="w-full">
          Test 404 Response
        </Button>
      </Card>
      
      <Card className="p-6 text-center">
        <Typography variant="h5" className="mb-4">Network Timeout</Typography>
        <Button id="test-timeout" variant="outline" className="w-full">
          Test Timeout Error
        </Button>
      </Card>
      
      <Card className="p-6 text-center">
        <Typography variant="h5" className="mb-4">Server Error</Typography>
        <Button id="test-server-error" variant="outline" className="w-full">
          Test 500 Error
        </Button>
      </Card>
    </div>
  </Section>

  <!-- Performance Tests -->
  <Section background="white" padding="2xl" containerSize="large">
    <Typography variant="h2" className="mb-8 text-center">Performance & Memory Tests</Typography>
    
    <div class="grid md:grid-cols-2 gap-6">
      <Card className="p-6">
        <Typography variant="h4" className="mb-4">Memory Stress Test</Typography>
        <Typography variant="body" className="mb-4 text-gray-600">
          Create memory pressure to test performance monitoring.
        </Typography>
        <Button id="memory-test" variant="secondary" className="w-full">
          Run Memory Test
        </Button>
        <div id="memory-results" class="mt-4 text-sm text-gray-600"></div>
      </Card>
      
      <Card className="p-6">
        <Typography variant="h4" className="mb-4">DOM Performance Test</Typography>
        <Typography variant="body" className="mb-4 text-gray-600">
          Test DOM manipulation performance monitoring.
        </Typography>
        <Button id="dom-test" variant="secondary" className="w-full">
          Run DOM Test
        </Button>
        <div id="dom-results" class="mt-4"></div>
      </Card>
    </div>
  </Section>

  <!-- Error Log Display -->
  <Section background="gray-900" padding="2xl" containerSize="large">
    <Typography variant="h2" className="mb-8 text-center text-white">Real-Time Error Console</Typography>
    
    <div class="bg-black rounded-lg p-4 font-mono text-green-400 min-h-[200px] overflow-auto">
      <div id="error-console">
        <div class="text-gray-500"># Error console initialized...</div>
        <div class="text-gray-500"># Watching for errors, warnings, and debug info...</div>
      </div>
    </div>
    
    <div class="mt-4 flex gap-4">
      <Button id="clear-console" variant="outline" size="sm">
        Clear Console
      </Button>
      <Button id="export-logs" variant="outline" size="sm">
        Export Error Logs
      </Button>
    </div>
  </Section>
</Layout>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // Error Test Suite Controller
  class ErrorTestSuite {
    constructor() {
      this.console = document.getElementById('error-console');
      this.errorCount = 0;
      this.init();
    }
    
    init() {
      this.setupGlobalErrorHandling();
      this.setupTestButtons();
      this.log('Test suite initialized', 'info');
    }
    
    setupGlobalErrorHandling() {
      // Override console methods to capture logs
      const originalConsole = {
        log: console.log,
        warn: console.warn,
        error: console.error
      };
      
      console.log = (...args) => {
        originalConsole.log(...args);
        this.log(args.join(' '), 'info');
      };
      
      console.warn = (...args) => {
        originalConsole.warn(...args);
        this.log(args.join(' '), 'warning');
      };
      
      console.error = (...args) => {
        originalConsole.error(...args);
        this.log(args.join(' '), 'error');
      };
      
      // Global error handler
      window.addEventListener('error', (event) => {
        this.log(`Error: ${event.message} at ${event.filename}:${event.lineno}`, 'error');
      });
      
      // Promise rejection handler
      window.addEventListener('unhandledrejection', (event) => {
        this.log(`Unhandled Promise Rejection: ${event.reason}`, 'error');
      });
    }
    
    setupTestButtons() {
      // Async error test
      document.getElementById('async-error-test')?.addEventListener('click', async () => {
        try {
          this.log('Testing async error...', 'info');
          await this.simulateAsyncError();
        } catch (error) {
          this.log(`Async error caught: ${error.message}`, 'error');
          
          if (window.errorManager) {
            window.errorManager.logError(error, 'AsyncTest', { showToast: true });
          }
        }
      });
      
      // Network error tests
      document.getElementById('test-404')?.addEventListener('click', () => {
        this.testNetworkError('https://httpstat.us/404');
      });
      
      document.getElementById('test-timeout')?.addEventListener('click', () => {
        this.testNetworkTimeout();
      });
      
      document.getElementById('test-server-error')?.addEventListener('click', () => {
        this.testNetworkError('https://httpstat.us/500');
      });
      
      // Performance tests
      document.getElementById('memory-test')?.addEventListener('click', () => {
        this.testMemoryUsage();
      });
      
      document.getElementById('dom-test')?.addEventListener('click', () => {
        this.testDOMPerformance();
      });
      
      // Console controls
      document.getElementById('clear-console')?.addEventListener('click', () => {
        this.clearConsole();
      });
      
      document.getElementById('export-logs')?.addEventListener('click', () => {
        this.exportLogs();
      });
    }
    
    async simulateAsyncError() {
      await new Promise(resolve => setTimeout(resolve, 1000));
      throw new Error('Simulated async error for testing');
    }
    
    async testNetworkError(url) {
      this.log(`Testing network request to: ${url}`, 'info');
      
      try {
        const response = await fetch(url);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        this.log('Request successful', 'success');
      } catch (error) {
        this.log(`Network error: ${error.message}`, 'error');
        
        if (window.errorManager) {
          window.errorManager.logError(error, 'NetworkTest', { 
            showToast: true,
            metadata: { url }
          });
        }
      }
    }
    
    async testNetworkTimeout() {
      this.log('Testing network timeout...', 'info');
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1000);
      
      try {
        await fetch('https://httpstat.us/200?sleep=5000', {
          signal: controller.signal
        });
      } catch (error) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
          this.log('Request timed out', 'error');
        } else {
          this.log(`Network error: ${error.message}`, 'error');
        }
        
        if (window.errorManager) {
          window.errorManager.logError(error, 'TimeoutTest', { showToast: true });
        }
      }
    }
    
    testMemoryUsage() {
      this.log('Running memory stress test...', 'info');
      const results = document.getElementById('memory-results');
      
      // Create memory pressure
      const largeArrays = [];
      const startTime = performance.now();
      
      try {
        for (let i = 0; i < 100; i++) {
          largeArrays.push(new Array(10000).fill(Math.random()));
        }
        
        const endTime = performance.now();
        const executionTime = (endTime - startTime).toFixed(2);
        
        // Check memory usage if available
        if (performance.memory) {
          const memory = performance.memory;
          const memoryInfo = `
            Used: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB<br>
            Total: ${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB<br>
            Limit: ${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB<br>
            Execution Time: ${executionTime}ms
          `;
          results.innerHTML = memoryInfo;
          this.log(`Memory test completed in ${executionTime}ms`, 'success');
        } else {
          results.innerHTML = `Test completed in ${executionTime}ms<br>(Memory API not available)`;
          this.log('Memory test completed (Memory API not available)', 'info');
        }
        
        // Cleanup
        setTimeout(() => {
          largeArrays.length = 0;
        }, 1000);
        
      } catch (error) {
        this.log(`Memory test error: ${error.message}`, 'error');
        results.innerHTML = `Error: ${error.message}`;
      }
    }
    
    testDOMPerformance() {
      this.log('Running DOM performance test...', 'info');
      const results = document.getElementById('dom-results');
      const startTime = performance.now();
      
      try {
        // Create and manipulate DOM elements
        const fragment = document.createDocumentFragment();
        
        for (let i = 0; i < 1000; i++) {
          const div = document.createElement('div');
          div.className = 'test-element';
          div.textContent = `Test element ${i}`;
          fragment.appendChild(div);
        }
        
        results.appendChild(fragment);
        
        const endTime = performance.now();
        const executionTime = (endTime - startTime).toFixed(2);
        
        this.log(`DOM test completed in ${executionTime}ms`, 'success');
        
        // Cleanup after a short delay
        setTimeout(() => {
          const testElements = results.querySelectorAll('.test-element');
          testElements.forEach(el => el.remove());
          results.innerHTML = `DOM test completed in ${executionTime}ms<br>(1000 elements created and cleaned up)`;
        }, 1000);
        
      } catch (error) {
        this.log(`DOM test error: ${error.message}`, 'error');
        results.innerHTML = `Error: ${error.message}`;
      }
    }
    
    log(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const colors = {
        info: 'text-blue-400',
        success: 'text-green-400',
        warning: 'text-yellow-400',
        error: 'text-red-400'
      };
      
      const icon = {
        info: '‚Ñπ',
        success: '‚úì',
        warning: '‚ö†',
        error: '‚úó'
      };
      
      const logEntry = document.createElement('div');
      logEntry.className = colors[type];
      logEntry.innerHTML = `[${timestamp}] ${icon[type]} ${message}`;
      
      this.console.appendChild(logEntry);
      this.console.scrollTop = this.console.scrollHeight;
      
      if (type === 'error') {
        this.errorCount++;
      }
    }
    
    clearConsole() {
      this.console.innerHTML = `
        <div class="text-gray-500"># Console cleared at ${new Date().toLocaleTimeString()}</div>
      `;
      this.errorCount = 0;
    }
    
    exportLogs() {
      const logs = Array.from(this.console.children)
        .map(entry => entry.textContent)
        .join('\n');
      
      const blob = new Blob([logs], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `error-logs-${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.log('Error logs exported', 'success');
    }
  }
  
  // Initialize test suite
  new ErrorTestSuite();
});
</script>

<style>
  .test-element {
    padding: 2px 4px;
    margin: 1px;
    background: #f0f0f0;
    border-radius: 2px;
    font-size: 12px;
    display: inline-block;
  }
  
  #error-console {
    max-height: 300px;
    overflow-y: auto;
  }
  
  #error-console::-webkit-scrollbar {
    width: 8px;
  }
  
  #error-console::-webkit-scrollbar-track {
    background: #1f1f1f;
  }
  
  #error-console::-webkit-scrollbar-thumb {
    background: #4a4a4a;
    border-radius: 4px;
  }
  
  #error-console::-webkit-scrollbar-thumb:hover {
    background: #666;
  }
</style>
